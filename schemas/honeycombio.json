{
  "name": "honeycombio",
  "version": "0.30.0",
  "description": "A Pulumi provider dynamically bridged from honeycombio.",
  "attribution": "This Pulumi package is based on the [`honeycombio` Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio).",
  "repository": "https://github.com/honeycombio/terraform-provider-honeycombio",
  "publisher": "honeycombio",
  "meta": {
    "moduleFormat": "(.*)(?:/[^/]*)"
  },
  "language": {
    "csharp": {
      "compatibility": "tfbridge20",
      "liftSingleValueMethodReturns": true,
      "respectSchemaVersion": true
    },
    "go": {
      "importBasePath": "github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio",
      "rootPackageName": "honeycombio",
      "liftSingleValueMethodReturns": true,
      "generateExtraInputTypes": true,
      "respectSchemaVersion": true
    },
    "java": {
      "basePackage": "",
      "buildFiles": "",
      "gradleNexusPublishPluginVersion": "",
      "gradleTest": ""
    },
    "nodejs": {
      "packageDescription": "A Pulumi provider dynamically bridged from honeycombio.",
      "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
      "compatibility": "tfbridge20",
      "disableUnionOutputTypes": true,
      "liftSingleValueMethodReturns": true,
      "respectSchemaVersion": true
    },
    "python": {
      "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
      "compatibility": "tfbridge20",
      "respectSchemaVersion": true,
      "pyproject": {
        "enabled": true
      }
    }
  },
  "config": {
    "variables": {
      "apiKey": {
        "type": "string",
        "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
        "secret": true
      },
      "apiKeyId": {
        "type": "string",
        "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
      },
      "apiKeySecret": {
        "type": "string",
        "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
        "secret": true
      },
      "apiUrl": {
        "type": "string",
        "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
      },
      "debug": {
        "type": "boolean",
        "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
      }
    }
  },
  "types": {
    "honeycombio:index/ApiKeyPermission:ApiKeyPermission": {
      "properties": {
        "createDatasets": {
          "type": "boolean",
          "description": "Allow this key to create missing datasets when sending telemetry. Defaults to `false`.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "createDatasets"
          ]
        }
      }
    },
    "honeycombio:index/BoardQuery:BoardQuery": {
      "properties": {
        "caption": {
          "type": "string",
          "description": "Descriptive text to contextualize the Query within the Board. Supports Markdown.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this query is associated with.\n",
          "deprecationMessage": "Deprecated"
        },
        "graphSettings": {
          "$ref": "#/types/honeycombio:index%2FBoardQueryGraphSettings:BoardQueryGraphSettings",
          "description": "A map of boolean toggles to manages the settings for this query's graph on the board.\nIf a value is unspecified, it is assumed to be false.\nCurrently supported toggles are:\n"
        },
        "queryAnnotationId": {
          "type": "string",
          "description": "The ID of the Query Annotation to associate with this query.\n"
        },
        "queryId": {
          "type": "string",
          "description": "The ID of the Query to run.\n"
        },
        "queryStyle": {
          "type": "string",
          "description": "How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.\n"
        }
      },
      "type": "object",
      "required": [
        "queryId"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "dataset",
            "queryId",
            "queryStyle"
          ]
        }
      }
    },
    "honeycombio:index/BoardQueryGraphSettings:BoardQueryGraphSettings": {
      "properties": {
        "hideMarkers": {
          "type": "boolean",
          "description": "Disable the overlay of Markers on the graph.\n"
        },
        "logScale": {
          "type": "boolean",
          "description": "Set the graph's Y axis to Log scale.\n"
        },
        "omitMissingValues": {
          "type": "boolean",
          "description": "Enable interpolatation between datapoints when the intervening time buckets have no matching events.\n"
        },
        "overlaidCharts": {
          "type": "boolean",
          "description": "See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.\n"
        },
        "stackedGraphs": {
          "type": "boolean",
          "description": "Enable the display of groups as stacked colored area under their line graphs.\n"
        },
        "utcXaxis": {
          "type": "boolean",
          "description": "Set the graph's X axis to UTC.\n"
        }
      },
      "type": "object"
    },
    "honeycombio:index/BoardSlo:BoardSlo": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the SLO to place on the board.\n"
        }
      },
      "type": "object",
      "required": [
        "id"
      ]
    },
    "honeycombio:index/BurnAlertRecipient:BurnAlertRecipient": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of an already existing recipient. Should not be used in combination with `type` and `target`.\n"
        },
        "notificationDetails": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBurnAlertRecipientNotificationDetail:BurnAlertRecipientNotificationDetail"
          },
          "description": "a block of additional details to send along with the notification. Supported details are described below.\n"
        },
        "target": {
          "type": "string",
          "description": "Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "id",
            "target",
            "type"
          ]
        }
      }
    },
    "honeycombio:index/BurnAlertRecipientNotificationDetail:BurnAlertRecipientNotificationDetail": {
      "properties": {
        "pagerdutySeverity": {
          "type": "string",
          "description": "Indicates the severity of an alert and has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBurnAlertRecipientNotificationDetailVariable:BurnAlertRecipientNotificationDetailVariable"
          },
          "description": "Up to 10 configuration blocks with a `name` and a `value` to override the default variable value. Must be used in combination with a Webhook recipient that already has a variable with the same name configured.\n\n| Type      | Target              |\n|-----------|---------------------|\n| email     | an email address    |\n| pagerduty | _N/A_               |\n| slack     | name of the channel |\n| webhook   | name of the webhook |\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "pagerdutySeverity"
          ]
        }
      }
    },
    "honeycombio:index/BurnAlertRecipientNotificationDetailVariable:BurnAlertRecipientNotificationDetailVariable": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the variable\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "name",
            "value"
          ]
        }
      }
    },
    "honeycombio:index/TriggerEvaluationSchedule:TriggerEvaluationSchedule": {
      "properties": {
        "daysOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of days of the week (in lowercase) to evaluate the trigger on\n"
        },
        "endTime": {
          "type": "string",
          "description": "UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)\n"
        },
        "startTime": {
          "type": "string",
          "description": "UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)\n"
        }
      },
      "type": "object",
      "required": [
        "daysOfWeeks",
        "endTime",
        "startTime"
      ]
    },
    "honeycombio:index/TriggerRecipient:TriggerRecipient": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.\n"
        },
        "notificationDetails": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerRecipientNotificationDetail:TriggerRecipientNotificationDetail"
          },
          "description": "a block of additional details to send along with the notification.\n"
        },
        "target": {
          "type": "string",
          "description": "Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).\nCannot not be used in combination with `id`.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.\nCannot not be used in combination with `id`.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "id",
            "target",
            "type"
          ]
        }
      }
    },
    "honeycombio:index/TriggerRecipientNotificationDetail:TriggerRecipientNotificationDetail": {
      "properties": {
        "pagerdutySeverity": {
          "type": "string",
          "description": "Indicates the severity of an alert and has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerRecipientNotificationDetailVariable:TriggerRecipientNotificationDetailVariable"
          },
          "description": "Up to 10 configuration blocks with a `name` and a `value` to override the default variable value. Must be used in combination with a Webhook recipient that already has a variable with the same name configured.\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "pagerdutySeverity"
          ]
        }
      }
    },
    "honeycombio:index/TriggerRecipientNotificationDetailVariable:TriggerRecipientNotificationDetailVariable": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the trigger.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the variable\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "name",
            "value"
          ]
        }
      }
    },
    "honeycombio:index/TriggerThreshold:TriggerThreshold": {
      "properties": {
        "exceededLimit": {
          "type": "number",
          "description": "The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.\n"
        },
        "op": {
          "type": "string",
          "description": "The operator to apply, allowed threshold operators are `\u003e`, `\u003e=`, `\u003c`, and `\u003c=`.\n"
        },
        "value": {
          "type": "number",
          "description": "The value to be used with the operator.\n"
        }
      },
      "type": "object",
      "required": [
        "op",
        "value"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "exceededLimit",
            "op",
            "value"
          ]
        }
      }
    },
    "honeycombio:index/WebhookRecipientHeader:WebhookRecipientHeader": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the Webhook Integration to create.\n"
        },
        "value": {
          "type": "string",
          "description": "Value for the header\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "name",
            "value"
          ]
        }
      }
    },
    "honeycombio:index/WebhookRecipientTemplate:WebhookRecipientTemplate": {
      "properties": {
        "body": {
          "type": "string",
          "description": "A JSON formatted string to represent the webhook payload.\n\nOptionally, when configuring custom webhooks, use the `variable` block to create custom variables that can be interpolated in a template.\nTo configure a variable, at least one `template` block must also be configured.\nThe `variable` block accepts the following arguments:\n"
        },
        "type": {
          "type": "string",
          "description": "The template type, allowed types are `trigger`, `exhaustion_time`, and `budget_rate`. Only one template block of each type is allowed on a single recipient.\n"
        }
      },
      "type": "object",
      "required": [
        "body",
        "type"
      ]
    },
    "honeycombio:index/WebhookRecipientVariable:WebhookRecipientVariable": {
      "properties": {
        "defaultValue": {
          "type": "string",
          "description": "An optional default value for the variable\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Webhook Integration to create.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "defaultValue",
            "name"
          ]
        }
      }
    },
    "honeycombio:index/getAuthMetadataApiKeyAccess:getAuthMetadataApiKeyAccess": {
      "properties": {
        "boards": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage Boards.\n"
        },
        "columns": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations\n"
        },
        "datasets": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage Datasets.\n"
        },
        "events": {
          "type": "boolean",
          "description": "`true` if this API key can key can send events to Honeycomb.\n"
        },
        "markers": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage Markers.\n"
        },
        "queries": {
          "type": "boolean",
          "description": "`true` if this API key can execute existing Queries via the Query Data API.\n"
        },
        "recipients": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage Recipients.\n"
        },
        "slos": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage SLOs.\n"
        },
        "triggers": {
          "type": "boolean",
          "description": "`true` if this API key can create and manage Triggers.\n"
        }
      },
      "type": "object",
      "required": [
        "boards",
        "columns",
        "datasets",
        "events",
        "markers",
        "queries",
        "recipients",
        "slos",
        "triggers"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": []
        }
      }
    },
    "honeycombio:index/getAuthMetadataEnvironment:getAuthMetadataEnvironment": {
      "properties": {
        "classic": {
          "type": "boolean",
          "description": "`true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Team.\n"
        },
        "slug": {
          "type": "string",
          "description": "The slug of the Team.\n"
        }
      },
      "type": "object",
      "required": [
        "classic",
        "name",
        "slug"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": []
        }
      }
    },
    "honeycombio:index/getAuthMetadataTeam:getAuthMetadataTeam": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the Team.\n"
        },
        "slug": {
          "type": "string",
          "description": "The slug of the Team.\n"
        }
      },
      "type": "object",
      "required": [
        "name",
        "slug"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": []
        }
      }
    },
    "honeycombio:index/getDatasetsDetailFilter:getDatasetsDetailFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the detail field to match on.\n"
        },
        "valueRegex": {
          "type": "string",
          "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ]
    },
    "honeycombio:index/getEnvironmentsDetailFilter:getEnvironmentsDetailFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the detail field to match on.\n"
        },
        "valueRegex": {
          "type": "string",
          "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ]
    },
    "honeycombio:index/getQuerySpecificationCalculation:getQuerySpecificationCalculation": {
      "properties": {
        "column": {
          "type": "string",
          "description": "The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.\n"
        },
        "op": {
          "type": "string",
          "description": "The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
        }
      },
      "type": "object",
      "required": [
        "op"
      ]
    },
    "honeycombio:index/getQuerySpecificationFilter:getQuerySpecificationFilter": {
      "properties": {
        "column": {
          "type": "string",
          "description": "The column to apply the filter to.\n"
        },
        "op": {
          "type": "string",
          "description": "The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.\n"
        },
        "value": {
          "type": "string",
          "description": "The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.\n\n* \u003e **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.\n"
        }
      },
      "type": "object",
      "required": [
        "column",
        "op"
      ]
    },
    "honeycombio:index/getQuerySpecificationHaving:getQuerySpecificationHaving": {
      "properties": {
        "calculateOp": {
          "type": "string",
          "description": "The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.\n"
        },
        "column": {
          "type": "string",
          "description": "The column to apply the `calculate_op` to, not needed with `COUNT` or `CONCURRENCY`.\n"
        },
        "op": {
          "type": "string",
          "description": "The operator to apply to filter the query results. One of `=`, `!=`, `\u003e`, `\u003e=`, `\u003c`, or `\u003c=`.\n"
        },
        "value": {
          "type": "number",
          "description": "The value used with `op`. Currently assumed to be a number.\n\n\u003e **NOTE** A having term's `column`/`calculate_op` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculate_op` pair.\n"
        }
      },
      "type": "object",
      "required": [
        "calculateOp",
        "op",
        "value"
      ]
    },
    "honeycombio:index/getQuerySpecificationOrder:getQuerySpecificationOrder": {
      "properties": {
        "column": {
          "type": "string",
          "description": "Either a column present in `breakdown` or a column that `op` applies to.\n"
        },
        "op": {
          "type": "string",
          "description": "The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
        },
        "order": {
          "type": "string",
          "description": "The sort direction, if set must be `ascending` or `descending`.\n"
        }
      },
      "type": "object"
    },
    "honeycombio:index/getRecipientDetailFilter:getRecipientDetailFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integration_name`, and `url`.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the detail field to match on.\n"
        },
        "valueRegex": {
          "type": "string",
          "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ]
    },
    "honeycombio:index/getRecipientsDetailFilter:getRecipientsDetailFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integration_name`, and `url`.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the detail field to match on.\n"
        },
        "valueRegex": {
          "type": "string",
          "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ]
    },
    "honeycombio:index/getSlosDetailFilter:getSlosDetailFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the detail field to match on.\n"
        },
        "valueRegex": {
          "type": "string",
          "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
        }
      },
      "type": "object",
      "required": [
        "name"
      ]
    }
  },
  "provider": {
    "description": "The provider type for the honeycombio package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
    "properties": {
      "apiKey": {
        "type": "string",
        "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
        "secret": true
      },
      "apiKeyId": {
        "type": "string",
        "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
      },
      "apiKeySecret": {
        "type": "string",
        "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
        "secret": true
      },
      "apiUrl": {
        "type": "string",
        "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
      }
    },
    "type": "object",
    "inputProperties": {
      "apiKey": {
        "type": "string",
        "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
        "secret": true
      },
      "apiKeyId": {
        "type": "string",
        "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
      },
      "apiKeySecret": {
        "type": "string",
        "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
        "secret": true
      },
      "apiUrl": {
        "type": "string",
        "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
      },
      "debug": {
        "type": "boolean",
        "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
      }
    }
  },
  "resources": {
    "honeycombio:index/apiKey:ApiKey": {
      "description": "## # Resource: honeycombio.ApiKey\n\nCreates a Honeycomb API Key.\nFor more information about API Keys, check out [Best Practices for API Keys](https://docs.honeycomb.io/get-started/best-practices/api-keys/).\n\n\u003e This resource requires the provider be configured with a Management Key with `api-keys:write` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prodIngest = new honeycombio.ApiKey(\"prodIngest\", {\n    type: \"ingest\",\n    environmentId: _var.environment_id,\n    permissions: [{\n        createDatasets: true,\n    }],\n});\nexport const ingestKey = `${honeycomb_api_key.prod_ingest.id}${honeycomb_api_key.prod_ingest.secret}`;\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod_ingest = honeycombio.ApiKey(\"prodIngest\",\n    type=\"ingest\",\n    environment_id=var[\"environment_id\"],\n    permissions=[{\n        \"create_datasets\": True,\n    }])\npulumi.export(\"ingestKey\", f\"{honeycomb_api_key['prod_ingest']['id']}{honeycomb_api_key['prod_ingest']['secret']}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodIngest = new Honeycombio.ApiKey(\"prodIngest\", new()\n    {\n        Type = \"ingest\",\n        EnvironmentId = @var.Environment_id,\n        Permissions = new[]\n        {\n            new Honeycombio.Inputs.ApiKeyPermissionArgs\n            {\n                CreateDatasets = true,\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ingestKey\"] = $\"{honeycomb_api_key.Prod_ingest.Id}{honeycomb_api_key.Prod_ingest.Secret}\",\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewApiKey(ctx, \"prodIngest\", \u0026honeycombio.ApiKeyArgs{\n\t\t\tType:          pulumi.String(\"ingest\"),\n\t\t\tEnvironmentId: pulumi.Any(_var.Environment_id),\n\t\t\tPermissions: honeycombio.ApiKeyPermissionArray{\n\t\t\t\t\u0026honeycombio.ApiKeyPermissionArgs{\n\t\t\t\t\tCreateDatasets: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ingestKey\", pulumi.Sprintf(\"%v%v\", honeycomb_api_key.Prod_ingest.Id, honeycomb_api_key.Prod_ingest.Secret))\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.ApiKey;\nimport com.pulumi.honeycombio.ApiKeyArgs;\nimport com.pulumi.honeycombio.inputs.ApiKeyPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodIngest = new ApiKey(\"prodIngest\", ApiKeyArgs.builder()\n            .type(\"ingest\")\n            .environmentId(var_.environment_id())\n            .permissions(ApiKeyPermissionArgs.builder()\n                .createDatasets(true)\n                .build())\n            .build());\n\n        ctx.export(\"ingestKey\", String.format(\"%s%s\", honeycomb_api_key.prod_ingest().id(),honeycomb_api_key.prod_ingest().secret()));\n    }\n}\n```\n```yaml\nresources:\n  prodIngest:\n    type: honeycombio:ApiKey\n    properties:\n      type: ingest\n      environmentId: ${var.environment_id}\n      permissions:\n        - createDatasets: true\noutputs:\n  ingestKey: ${honeycomb_api_key.prod_ingest.id}${honeycomb_api_key.prod_ingest.secret}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAPI Keys cannot be imported.\n\n",
      "properties": {
        "disabled": {
          "type": "boolean",
          "description": "Whether the API key is disabled. Defaults to `false`.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The Environment ID the API key is scoped to.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the API key.\n"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FApiKeyPermission:ApiKeyPermission"
          },
          "description": "A configuration block (described below) setting what actions the API key can perform.\n"
        },
        "secret": {
          "type": "string",
          "description": "The secret portion of the API Key.\n",
          "secret": true
        },
        "type": {
          "type": "string",
          "description": "The type of API key. Currently only `ingest` is supported.\n"
        }
      },
      "type": "object",
      "required": [
        "disabled",
        "environmentId",
        "name",
        "secret",
        "type"
      ],
      "inputProperties": {
        "disabled": {
          "type": "boolean",
          "description": "Whether the API key is disabled. Defaults to `false`.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The Environment ID the API key is scoped to.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the API key.\n"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FApiKeyPermission:ApiKeyPermission"
          },
          "description": "A configuration block (described below) setting what actions the API key can perform.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of API key. Currently only `ingest` is supported.\n"
        }
      },
      "requiredInputs": [
        "environmentId",
        "type"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ApiKey resources.\n",
        "properties": {
          "disabled": {
            "type": "boolean",
            "description": "Whether the API key is disabled. Defaults to `false`.\n"
          },
          "environmentId": {
            "type": "string",
            "description": "The Environment ID the API key is scoped to.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the API key.\n"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FApiKeyPermission:ApiKeyPermission"
            },
            "description": "A configuration block (described below) setting what actions the API key can perform.\n"
          },
          "secret": {
            "type": "string",
            "description": "The secret portion of the API Key.\n",
            "secret": true
          },
          "type": {
            "type": "string",
            "description": "The type of API key. Currently only `ingest` is supported.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/board:Board": {
      "description": "## # Resource: honeycombio.Board\n\nCreates a board. For more information about boards, check out [Collaborate with Boards](https://docs.honeycomb.io/working-with-your-data/collaborating/boards/#docs-sidebar).\n\n## Example Usage\n\n### Simple Board\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst queryQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"P99\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    breakdowns: [\"app.tenant\"],\n});\nconst queryQuery = new honeycombio.Query(\"queryQuery\", {\n    dataset: _var.dataset,\n    queryJson: queryQuerySpecification.then(queryQuerySpecification =\u003e queryQuerySpecification.json),\n});\nconst board = new honeycombio.Board(\"board\", {queries: [{\n    queryId: queryQuery.id,\n}]});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nquery_query_specification = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"P99\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    breakdowns=[\"app.tenant\"])\nquery_query = honeycombio.Query(\"queryQuery\",\n    dataset=var[\"dataset\"],\n    query_json=query_query_specification.json)\nboard = honeycombio.Board(\"board\", queries=[{\n    \"query_id\": query_query.id,\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var queryQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"P99\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        Breakdowns = new[]\n        {\n            \"app.tenant\",\n        },\n    });\n\n    var queryQuery = new Honeycombio.Query(\"queryQuery\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryJson = queryQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var board = new Honeycombio.Board(\"board\", new()\n    {\n        Queries = new[]\n        {\n            new Honeycombio.Inputs.BoardQueryArgs\n            {\n                QueryId = queryQuery.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tqueryQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"P99\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.tenant\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueryQuery, err := honeycombio.NewQuery(ctx, \"queryQuery\", \u0026honeycombio.QueryArgs{\n\t\t\tDataset:   pulumi.Any(_var.Dataset),\n\t\t\tQueryJson: pulumi.String(queryQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewBoard(ctx, \"board\", \u0026honeycombio.BoardArgs{\n\t\t\tQueries: honeycombio.BoardQueryArray{\n\t\t\t\t\u0026honeycombio.BoardQueryArgs{\n\t\t\t\t\tQueryId: queryQuery.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Query;\nimport com.pulumi.honeycombio.QueryArgs;\nimport com.pulumi.honeycombio.Board;\nimport com.pulumi.honeycombio.BoardArgs;\nimport com.pulumi.honeycombio.inputs.BoardQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var queryQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"P99\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .breakdowns(\"app.tenant\")\n            .build());\n\n        var queryQuery = new Query(\"queryQuery\", QueryArgs.builder()\n            .dataset(var_.dataset())\n            .queryJson(queryQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var board = new Board(\"board\", BoardArgs.builder()\n            .queries(BoardQueryArgs.builder()\n                .queryId(queryQuery.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  queryQuery:\n    type: honeycombio:Query\n    properties:\n      dataset: ${var.dataset}\n      queryJson: ${queryQuerySpecification.json}\n  board:\n    type: honeycombio:Board\n    properties:\n      queries:\n        - queryId: ${queryQuery.id}\nvariables:\n  queryQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: P99\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        breakdowns:\n          - app.tenant\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Annotated Board\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst latencyByUseridQuerySpecification = honeycombio.getQuerySpecification({\n    timeRange: 86400,\n    breakdowns: [\"app.user_id\"],\n    calculations: [\n        {\n            op: \"HEATMAP\",\n            column: \"duration_ms\",\n        },\n        {\n            op: \"P99\",\n            column: \"duration_ms\",\n        },\n    ],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    orders: [{\n        column: \"duration_ms\",\n        op: \"P99\",\n        order: \"descending\",\n    }],\n});\nconst latencyByUseridQuery = new honeycombio.Query(\"latencyByUseridQuery\", {\n    dataset: _var.dataset,\n    queryJson: latencyByUseridQuerySpecification.then(latencyByUseridQuerySpecification =\u003e latencyByUseridQuerySpecification.json),\n});\nconst latencyByUseridQueryAnnotation = new honeycombio.QueryAnnotation(\"latencyByUseridQueryAnnotation\", {\n    dataset: _var.dataset,\n    queryId: latencyByUseridQuery.id,\n    description: \"A breakdown of trace latency by User over the last 24 hours\",\n});\nconst overview = new honeycombio.Board(\"overview\", {\n    queries: [{\n        caption: \"Latency by User\",\n        queryId: latencyByUseridQuery.id,\n        queryAnnotationId: latencyByUseridQueryAnnotation.queryAnnotationId,\n        graphSettings: {\n            utcXaxis: true,\n        },\n    }],\n    slos: [{\n        id: _var.slo_id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nlatency_by_userid_query_specification = honeycombio.get_query_specification(time_range=86400,\n    breakdowns=[\"app.user_id\"],\n    calculations=[\n        {\n            \"op\": \"HEATMAP\",\n            \"column\": \"duration_ms\",\n        },\n        {\n            \"op\": \"P99\",\n            \"column\": \"duration_ms\",\n        },\n    ],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    orders=[{\n        \"column\": \"duration_ms\",\n        \"op\": \"P99\",\n        \"order\": \"descending\",\n    }])\nlatency_by_userid_query = honeycombio.Query(\"latencyByUseridQuery\",\n    dataset=var[\"dataset\"],\n    query_json=latency_by_userid_query_specification.json)\nlatency_by_userid_query_annotation = honeycombio.QueryAnnotation(\"latencyByUseridQueryAnnotation\",\n    dataset=var[\"dataset\"],\n    query_id=latency_by_userid_query.id,\n    description=\"A breakdown of trace latency by User over the last 24 hours\")\noverview = honeycombio.Board(\"overview\",\n    queries=[{\n        \"caption\": \"Latency by User\",\n        \"query_id\": latency_by_userid_query.id,\n        \"query_annotation_id\": latency_by_userid_query_annotation.query_annotation_id,\n        \"graph_settings\": {\n            \"utc_xaxis\": True,\n        },\n    }],\n    slos=[{\n        \"id\": var[\"slo_id\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latencyByUseridQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        TimeRange = 86400,\n        Breakdowns = new[]\n        {\n            \"app.user_id\",\n        },\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"HEATMAP\",\n                Column = \"duration_ms\",\n            },\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"P99\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        Orders = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationOrderInputArgs\n            {\n                Column = \"duration_ms\",\n                Op = \"P99\",\n                Order = \"descending\",\n            },\n        },\n    });\n\n    var latencyByUseridQuery = new Honeycombio.Query(\"latencyByUseridQuery\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryJson = latencyByUseridQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var latencyByUseridQueryAnnotation = new Honeycombio.QueryAnnotation(\"latencyByUseridQueryAnnotation\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryId = latencyByUseridQuery.Id,\n        Description = \"A breakdown of trace latency by User over the last 24 hours\",\n    });\n\n    var overview = new Honeycombio.Board(\"overview\", new()\n    {\n        Queries = new[]\n        {\n            new Honeycombio.Inputs.BoardQueryArgs\n            {\n                Caption = \"Latency by User\",\n                QueryId = latencyByUseridQuery.Id,\n                QueryAnnotationId = latencyByUseridQueryAnnotation.QueryAnnotationId,\n                GraphSettings = new Honeycombio.Inputs.BoardQueryGraphSettingsArgs\n                {\n                    UtcXaxis = true,\n                },\n            },\n        },\n        Slos = new[]\n        {\n            new Honeycombio.Inputs.BoardSloArgs\n            {\n                Id = @var.Slo_id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlatencyByUseridQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tTimeRange: pulumi.Float64Ref(86400),\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.user_id\",\n\t\t\t},\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"HEATMAP\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tOp:     \"P99\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrders: []honeycombio.GetQuerySpecificationOrder{\n\t\t\t\t{\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t\tOp:     pulumi.StringRef(\"P99\"),\n\t\t\t\t\tOrder:  pulumi.StringRef(\"descending\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlatencyByUseridQuery, err := honeycombio.NewQuery(ctx, \"latencyByUseridQuery\", \u0026honeycombio.QueryArgs{\n\t\t\tDataset:   pulumi.Any(_var.Dataset),\n\t\t\tQueryJson: pulumi.String(latencyByUseridQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlatencyByUseridQueryAnnotation, err := honeycombio.NewQueryAnnotation(ctx, \"latencyByUseridQueryAnnotation\", \u0026honeycombio.QueryAnnotationArgs{\n\t\t\tDataset:     pulumi.Any(_var.Dataset),\n\t\t\tQueryId:     latencyByUseridQuery.ID(),\n\t\t\tDescription: pulumi.String(\"A breakdown of trace latency by User over the last 24 hours\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewBoard(ctx, \"overview\", \u0026honeycombio.BoardArgs{\n\t\t\tQueries: honeycombio.BoardQueryArray{\n\t\t\t\t\u0026honeycombio.BoardQueryArgs{\n\t\t\t\t\tCaption:           pulumi.String(\"Latency by User\"),\n\t\t\t\t\tQueryId:           latencyByUseridQuery.ID(),\n\t\t\t\t\tQueryAnnotationId: latencyByUseridQueryAnnotation.QueryAnnotationId,\n\t\t\t\t\tGraphSettings: \u0026honeycombio.BoardQueryGraphSettingsArgs{\n\t\t\t\t\t\tUtcXaxis: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlos: honeycombio.BoardSloArray{\n\t\t\t\t\u0026honeycombio.BoardSloArgs{\n\t\t\t\t\tId: pulumi.Any(_var.Slo_id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Query;\nimport com.pulumi.honeycombio.QueryArgs;\nimport com.pulumi.honeycombio.QueryAnnotation;\nimport com.pulumi.honeycombio.QueryAnnotationArgs;\nimport com.pulumi.honeycombio.Board;\nimport com.pulumi.honeycombio.BoardArgs;\nimport com.pulumi.honeycombio.inputs.BoardQueryArgs;\nimport com.pulumi.honeycombio.inputs.BoardQueryGraphSettingsArgs;\nimport com.pulumi.honeycombio.inputs.BoardSloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latencyByUseridQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .timeRange(86400)\n            .breakdowns(\"app.user_id\")\n            .calculations(            \n                GetQuerySpecificationCalculationArgs.builder()\n                    .op(\"HEATMAP\")\n                    .column(\"duration_ms\")\n                    .build(),\n                GetQuerySpecificationCalculationArgs.builder()\n                    .op(\"P99\")\n                    .column(\"duration_ms\")\n                    .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .orders(GetQuerySpecificationOrderArgs.builder()\n                .column(\"duration_ms\")\n                .op(\"P99\")\n                .order(\"descending\")\n                .build())\n            .build());\n\n        var latencyByUseridQuery = new Query(\"latencyByUseridQuery\", QueryArgs.builder()\n            .dataset(var_.dataset())\n            .queryJson(latencyByUseridQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var latencyByUseridQueryAnnotation = new QueryAnnotation(\"latencyByUseridQueryAnnotation\", QueryAnnotationArgs.builder()\n            .dataset(var_.dataset())\n            .queryId(latencyByUseridQuery.id())\n            .description(\"A breakdown of trace latency by User over the last 24 hours\")\n            .build());\n\n        var overview = new Board(\"overview\", BoardArgs.builder()\n            .queries(BoardQueryArgs.builder()\n                .caption(\"Latency by User\")\n                .queryId(latencyByUseridQuery.id())\n                .queryAnnotationId(latencyByUseridQueryAnnotation.queryAnnotationId())\n                .graphSettings(BoardQueryGraphSettingsArgs.builder()\n                    .utcXaxis(true)\n                    .build())\n                .build())\n            .slos(BoardSloArgs.builder()\n                .id(var_.slo_id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  latencyByUseridQuery:\n    type: honeycombio:Query\n    properties:\n      dataset: ${var.dataset}\n      queryJson: ${latencyByUseridQuerySpecification.json}\n  latencyByUseridQueryAnnotation:\n    type: honeycombio:QueryAnnotation\n    properties:\n      dataset: ${var.dataset}\n      queryId: ${latencyByUseridQuery.id}\n      description: A breakdown of trace latency by User over the last 24 hours\n  overview:\n    type: honeycombio:Board\n    properties:\n      queries:\n        - caption: Latency by User\n          queryId: ${latencyByUseridQuery.id}\n          queryAnnotationId: ${latencyByUseridQueryAnnotation.queryAnnotationId}\n          graphSettings:\n            utcXaxis: true\n      slos:\n        - id: ${var.slo_id}\nvariables:\n  latencyByUseridQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        timeRange: 86400\n        breakdowns:\n          - app.user_id\n        calculations:\n          - op: HEATMAP\n            column: duration_ms\n          - op: P99\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        orders:\n          - column: duration_ms\n            op: P99\n            order: descending\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBoards can be imported using their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/board:Board my_board AobW9oAZX71\n```\n\nYou can find the ID in the URL bar when visiting the board from the UI.\n\n",
      "properties": {
        "boardId": {
          "type": "string",
          "description": "ID of the board.\n"
        },
        "boardUrl": {
          "type": "string",
          "description": "The URL to the board in the Honeycomb UI.\n"
        },
        "columnLayout": {
          "type": "string",
          "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the board. Supports Markdown.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the board.\n"
        },
        "queries": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBoardQuery:BoardQuery"
          },
          "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
        },
        "slos": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBoardSlo:BoardSlo"
          },
          "description": "Up to six configuration blocks (described below) to place SLOs on the board.\n"
        },
        "style": {
          "type": "string",
          "description": "Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.\n",
          "deprecationMessage": "Deprecated"
        }
      },
      "type": "object",
      "required": [
        "boardId",
        "boardUrl",
        "columnLayout",
        "name"
      ],
      "inputProperties": {
        "boardId": {
          "type": "string",
          "description": "ID of the board.\n"
        },
        "columnLayout": {
          "type": "string",
          "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the board. Supports Markdown.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the board.\n"
        },
        "queries": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBoardQuery:BoardQuery"
          },
          "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
        },
        "slos": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBoardSlo:BoardSlo"
          },
          "description": "Up to six configuration blocks (described below) to place SLOs on the board.\n"
        },
        "style": {
          "type": "string",
          "description": "Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.\n",
          "deprecationMessage": "Deprecated"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Board resources.\n",
        "properties": {
          "boardId": {
            "type": "string",
            "description": "ID of the board.\n"
          },
          "boardUrl": {
            "type": "string",
            "description": "The URL to the board in the Honeycomb UI.\n"
          },
          "columnLayout": {
            "type": "string",
            "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the board. Supports Markdown.\n"
          },
          "name": {
            "type": "string",
            "description": "Name of the board.\n"
          },
          "queries": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FBoardQuery:BoardQuery"
            },
            "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
          },
          "slos": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FBoardSlo:BoardSlo"
            },
            "description": "Up to six configuration blocks (described below) to place SLOs on the board.\n"
          },
          "style": {
            "type": "string",
            "description": "Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.\n",
            "deprecationMessage": "Deprecated"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/burnAlert:BurnAlert": {
      "description": "## # Resource: honeycombio.BurnAlert\n\nCreates a burn alert. \n\nFor more information about burn alerts, \ncheck out [Define Burn Alerts](https://docs.honeycomb.io/working-with-your-data/slos/burn-alerts).\n\n## Example Usage\n\n### Basic Example - Exhaustion Time Burn Alert\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst exampleAlert = new honeycombio.BurnAlert(\"exampleAlert\", {\n    alertType: \"exhaustion_time\",\n    exhaustionMinutes: 480,\n    description: \"Exhaustion burn alert description\",\n    dataset: dataset,\n    sloId: sloId,\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"slack\",\n            target: \"#example-channel\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\nexample_alert = honeycombio.BurnAlert(\"exampleAlert\",\n    alert_type=\"exhaustion_time\",\n    exhaustion_minutes=480,\n    description=\"Exhaustion burn alert description\",\n    dataset=dataset,\n    slo_id=slo_id,\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"slack\",\n            \"target\": \"#example-channel\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var exampleAlert = new Honeycombio.BurnAlert(\"exampleAlert\", new()\n    {\n        AlertType = \"exhaustion_time\",\n        ExhaustionMinutes = 480,\n        Description = \"Exhaustion burn alert description\",\n        Dataset = dataset,\n        SloId = sloId,\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycombio.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"slack\",\n                Target = \"#example-channel\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\t_, err := honeycombio.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycombio.BurnAlertArgs{\n\t\t\tAlertType:         pulumi.String(\"exhaustion_time\"),\n\t\t\tExhaustionMinutes: pulumi.Float64(480),\n\t\t\tDescription:       pulumi.String(\"Exhaustion burn alert description\"),\n\t\t\tDataset:           pulumi.String(dataset),\n\t\t\tSloId:             pulumi.String(sloId),\n\t\t\tRecipients: honeycombio.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycombio.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycombio.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"slack\"),\n\t\t\t\t\tTarget: pulumi.String(\"#example-channel\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.BurnAlert;\nimport com.pulumi.honeycombio.BurnAlertArgs;\nimport com.pulumi.honeycombio.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .alertType(\"exhaustion_time\")\n            .exhaustionMinutes(480)\n            .description(\"Exhaustion burn alert description\")\n            .dataset(dataset)\n            .sloId(sloId)\n            .recipients(            \n                BurnAlertRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                BurnAlertRecipientArgs.builder()\n                    .type(\"slack\")\n                    .target(\"#example-channel\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycombio:BurnAlert\n    properties:\n      alertType: exhaustion_time\n      exhaustionMinutes: 480\n      description: Exhaustion burn alert description\n      dataset: ${dataset}\n      sloId: ${sloId}\n      # one or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: slack\n          target: '#example-channel'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Basic Example - Budget Rate Burn Alert\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst exampleAlert = new honeycombio.BurnAlert(\"exampleAlert\", {\n    alertType: \"budget_rate\",\n    budgetRateWindowMinutes: 480,\n    budgetRateDecreasePercent: 1,\n    description: \"my example description\",\n    dataset: dataset,\n    sloId: sloId,\n    recipients: [{\n        type: \"webhook\",\n        target: \"name of the webhook\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\nexample_alert = honeycombio.BurnAlert(\"exampleAlert\",\n    alert_type=\"budget_rate\",\n    budget_rate_window_minutes=480,\n    budget_rate_decrease_percent=1,\n    description=\"my example description\",\n    dataset=dataset,\n    slo_id=slo_id,\n    recipients=[{\n        \"type\": \"webhook\",\n        \"target\": \"name of the webhook\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var exampleAlert = new Honeycombio.BurnAlert(\"exampleAlert\", new()\n    {\n        AlertType = \"budget_rate\",\n        BudgetRateWindowMinutes = 480,\n        BudgetRateDecreasePercent = 1,\n        Description = \"my example description\",\n        Dataset = dataset,\n        SloId = sloId,\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"webhook\",\n                Target = \"name of the webhook\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\t_, err := honeycombio.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycombio.BurnAlertArgs{\n\t\t\tAlertType:                 pulumi.String(\"budget_rate\"),\n\t\t\tBudgetRateWindowMinutes:   pulumi.Float64(480),\n\t\t\tBudgetRateDecreasePercent: pulumi.Float64(1),\n\t\t\tDescription:               pulumi.String(\"my example description\"),\n\t\t\tDataset:                   pulumi.String(dataset),\n\t\t\tSloId:                     pulumi.String(sloId),\n\t\t\tRecipients: honeycombio.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycombio.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"webhook\"),\n\t\t\t\t\tTarget: pulumi.String(\"name of the webhook\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.BurnAlert;\nimport com.pulumi.honeycombio.BurnAlertArgs;\nimport com.pulumi.honeycombio.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .alertType(\"budget_rate\")\n            .budgetRateWindowMinutes(480)\n            .budgetRateDecreasePercent(1)\n            .description(\"my example description\")\n            .dataset(dataset)\n            .sloId(sloId)\n            .recipients(BurnAlertRecipientArgs.builder()\n                .type(\"webhook\")\n                .target(\"name of the webhook\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycombio:BurnAlert\n    properties:\n      alertType: budget_rate\n      budgetRateWindowMinutes: 480\n      budgetRateDecreasePercent: 1\n      description: my example description\n      dataset: ${dataset}\n      sloId: ${sloId}\n      # one or more recipients\n      recipients:\n        - type: webhook\n          target: name of the webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example - Exhaustion Time Burn Alert with PagerDuty Recipient and Severity\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst pdProd = honeycombio.getRecipient({\n    type: \"pagerduty\",\n    detailFilter: {\n        name: \"integration_name\",\n        value: \"Prod On-Call\",\n    },\n});\nconst exampleAlert = new honeycombio.BurnAlert(\"exampleAlert\", {\n    exhaustionMinutes: 60,\n    description: \"Burn alert description\",\n    dataset: dataset,\n    sloId: sloId,\n    recipients: [{\n        id: pdProd.then(pdProd =\u003e pdProd.id),\n        notificationDetails: [{\n            pagerdutySeverity: \"critical\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\npd_prod = honeycombio.get_recipient(type=\"pagerduty\",\n    detail_filter={\n        \"name\": \"integration_name\",\n        \"value\": \"Prod On-Call\",\n    })\nexample_alert = honeycombio.BurnAlert(\"exampleAlert\",\n    exhaustion_minutes=60,\n    description=\"Burn alert description\",\n    dataset=dataset,\n    slo_id=slo_id,\n    recipients=[{\n        \"id\": pd_prod.id,\n        \"notification_details\": [{\n            \"pagerduty_severity\": \"critical\",\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var pdProd = Honeycombio.GetRecipient.Invoke(new()\n    {\n        Type = \"pagerduty\",\n        DetailFilter = new Honeycombio.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"integration_name\",\n            Value = \"Prod On-Call\",\n        },\n    });\n\n    var exampleAlert = new Honeycombio.BurnAlert(\"exampleAlert\", new()\n    {\n        ExhaustionMinutes = 60,\n        Description = \"Burn alert description\",\n        Dataset = dataset,\n        SloId = sloId,\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.BurnAlertRecipientArgs\n            {\n                Id = pdProd.Apply(getRecipientResult =\u003e getRecipientResult.Id),\n                NotificationDetails = new[]\n                {\n                    new Honeycombio.Inputs.BurnAlertRecipientNotificationDetailArgs\n                    {\n                        PagerdutySeverity = \"critical\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\tpdProd, err := honeycombio.GetRecipient(ctx, \u0026honeycombio.GetRecipientArgs{\n\t\t\tType: \"pagerduty\",\n\t\t\tDetailFilter: honeycombio.GetRecipientDetailFilter{\n\t\t\t\tName:  \"integration_name\",\n\t\t\t\tValue: pulumi.StringRef(\"Prod On-Call\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycombio.BurnAlertArgs{\n\t\t\tExhaustionMinutes: pulumi.Float64(60),\n\t\t\tDescription:       pulumi.String(\"Burn alert description\"),\n\t\t\tDataset:           pulumi.String(dataset),\n\t\t\tSloId:             pulumi.String(sloId),\n\t\t\tRecipients: honeycombio.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycombio.BurnAlertRecipientArgs{\n\t\t\t\t\tId: pulumi.String(pdProd.Id),\n\t\t\t\t\tNotificationDetails: honeycombio.BurnAlertRecipientNotificationDetailArray{\n\t\t\t\t\t\t\u0026honeycombio.BurnAlertRecipientNotificationDetailArgs{\n\t\t\t\t\t\t\tPagerdutySeverity: pulumi.String(\"critical\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientArgs;\nimport com.pulumi.honeycombio.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycombio.BurnAlert;\nimport com.pulumi.honeycombio.BurnAlertArgs;\nimport com.pulumi.honeycombio.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        final var pdProd = HoneycombioFunctions.getRecipient(GetRecipientArgs.builder()\n            .type(\"pagerduty\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"integration_name\")\n                .value(\"Prod On-Call\")\n                .build())\n            .build());\n\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .exhaustionMinutes(60)\n            .description(\"Burn alert description\")\n            .dataset(dataset)\n            .sloId(sloId)\n            .recipients(BurnAlertRecipientArgs.builder()\n                .id(pdProd.applyValue(getRecipientResult -\u003e getRecipientResult.id()))\n                .notificationDetails(BurnAlertRecipientNotificationDetailArgs.builder()\n                    .pagerdutySeverity(\"critical\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycombio:BurnAlert\n    properties:\n      exhaustionMinutes: 60\n      description: Burn alert description\n      dataset: ${dataset}\n      sloId: ${sloId}\n      recipients:\n        - id: ${pdProd.id}\n          notificationDetails:\n            - pagerdutySeverity: critical\nvariables:\n  pdProd:\n    fn::invoke:\n      function: honeycombio:getRecipient\n      arguments:\n        type: pagerduty\n        detailFilter:\n          name: integration_name\n          value: Prod On-Call\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBurn alerts can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/burnAlert:BurnAlert my_alert my-dataset/bj9BwOb1uKz\n```\n",
      "properties": {
        "alertType": {
          "type": "string",
          "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
        },
        "budgetRateDecreasePercent": {
          "type": "number",
          "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
        },
        "budgetRateWindowMinutes": {
          "type": "number",
          "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this burn alert is associated with.\n"
        },
        "description": {
          "type": "string",
          "description": "A description for this Burn Alert.\n"
        },
        "exhaustionMinutes": {
          "type": "number",
          "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBurnAlertRecipient:BurnAlertRecipient"
          },
          "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
        },
        "sloId": {
          "type": "string",
          "description": "ID of the SLO this burn alert is associated with.\n"
        }
      },
      "type": "object",
      "required": [
        "alertType",
        "dataset",
        "description",
        "sloId"
      ],
      "inputProperties": {
        "alertType": {
          "type": "string",
          "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
        },
        "budgetRateDecreasePercent": {
          "type": "number",
          "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
        },
        "budgetRateWindowMinutes": {
          "type": "number",
          "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this burn alert is associated with.\n"
        },
        "description": {
          "type": "string",
          "description": "A description for this Burn Alert.\n"
        },
        "exhaustionMinutes": {
          "type": "number",
          "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FBurnAlertRecipient:BurnAlertRecipient"
          },
          "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
        },
        "sloId": {
          "type": "string",
          "description": "ID of the SLO this burn alert is associated with.\n"
        }
      },
      "requiredInputs": [
        "dataset",
        "sloId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering BurnAlert resources.\n",
        "properties": {
          "alertType": {
            "type": "string",
            "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
          },
          "budgetRateDecreasePercent": {
            "type": "number",
            "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
          },
          "budgetRateWindowMinutes": {
            "type": "number",
            "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this burn alert is associated with.\n"
          },
          "description": {
            "type": "string",
            "description": "A description for this Burn Alert.\n"
          },
          "exhaustionMinutes": {
            "type": "number",
            "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FBurnAlertRecipient:BurnAlertRecipient"
            },
            "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
          },
          "sloId": {
            "type": "string",
            "description": "ID of the SLO this burn alert is associated with.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/column:Column": {
      "description": "## # Resource: honeycombio.Column\n\nProvides a Honeycomb Column resource.\nThis can be used to create, update, and delete columns in a dataset.\n\n\u003e **Warning** Deleting a column is a destructive and irreversible operation which also removes the data in the column.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst durationMs = new honeycombio.Column(\"durationMs\", {\n    type: \"float\",\n    description: \"Duration of the trace\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nduration_ms = honeycombio.Column(\"durationMs\",\n    type=\"float\",\n    description=\"Duration of the trace\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var durationMs = new Honeycombio.Column(\"durationMs\", new()\n    {\n        Type = \"float\",\n        Description = \"Duration of the trace\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.NewColumn(ctx, \"durationMs\", \u0026honeycombio.ColumnArgs{\n\t\t\tType:        pulumi.String(\"float\"),\n\t\t\tDescription: pulumi.String(\"Duration of the trace\"),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.Column;\nimport com.pulumi.honeycombio.ColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        var durationMs = new Column(\"durationMs\", ColumnArgs.builder()\n            .type(\"float\")\n            .description(\"Duration of the trace\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  durationMs:\n    type: honeycombio:Column\n    properties:\n      type: float\n      description: Duration of the trace\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nColumns can be imported using a combination of the dataset name and their name, e.g.\n\n```sh\n$ pulumi import honeycombio:index/column:Column my_column my-dataset/duration_ms\n```\n",
      "properties": {
        "columnId": {
          "type": "string",
          "description": "ID of the column.\n"
        },
        "createdAt": {
          "type": "string",
          "description": "ISO8601 formatted time the column was created\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this column is added to.\n"
        },
        "description": {
          "type": "string",
          "description": "A description that is shown in the UI.\n"
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
        },
        "keyName": {
          "type": "string",
          "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
          "deprecationMessage": "Deprecated"
        },
        "lastWrittenAt": {
          "type": "string",
          "description": "ISO8601 formatted time the column was last written to (received event data)\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the column. Must be unique per dataset.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
        },
        "updatedAt": {
          "type": "string",
          "description": "ISO8601 formatted time the column was updated\n"
        }
      },
      "type": "object",
      "required": [
        "columnId",
        "createdAt",
        "dataset",
        "keyName",
        "lastWrittenAt",
        "name",
        "updatedAt"
      ],
      "inputProperties": {
        "columnId": {
          "type": "string",
          "description": "ID of the column.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this column is added to.\n"
        },
        "description": {
          "type": "string",
          "description": "A description that is shown in the UI.\n"
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
        },
        "keyName": {
          "type": "string",
          "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
          "deprecationMessage": "Deprecated"
        },
        "name": {
          "type": "string",
          "description": "The name of the column. Must be unique per dataset.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
        }
      },
      "requiredInputs": [
        "dataset"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Column resources.\n",
        "properties": {
          "columnId": {
            "type": "string",
            "description": "ID of the column.\n"
          },
          "createdAt": {
            "type": "string",
            "description": "ISO8601 formatted time the column was created\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this column is added to.\n"
          },
          "description": {
            "type": "string",
            "description": "A description that is shown in the UI.\n"
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
          },
          "keyName": {
            "type": "string",
            "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
            "deprecationMessage": "Deprecated"
          },
          "lastWrittenAt": {
            "type": "string",
            "description": "ISO8601 formatted time the column was last written to (received event data)\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the column. Must be unique per dataset.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
          },
          "updatedAt": {
            "type": "string",
            "description": "ISO8601 formatted time the column was updated\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/dataset:Dataset": {
      "description": "## # Resource: honeycombio.Dataset\n\nCreates a Dataset in an Environment.\n\n\u003e **Warning** Prior to version 0.27.0 of the provider, datasets were *not* deleted on destroy but left in place and only removed from state.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst myDataset = new honeycombio.Dataset(\"myDataset\", {description: \"buzzing with data\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nmy_dataset = honeycombio.Dataset(\"myDataset\", description=\"buzzing with data\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDataset = new Honeycombio.Dataset(\"myDataset\", new()\n    {\n        Description = \"buzzing with data\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewDataset(ctx, \"myDataset\", \u0026honeycombio.DatasetArgs{\n\t\t\tDescription: pulumi.String(\"buzzing with data\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.Dataset;\nimport com.pulumi.honeycombio.DatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDataset = new Dataset(\"myDataset\", DatasetArgs.builder()\n            .description(\"buzzing with data\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDataset:\n    type: honeycombio:Dataset\n    properties:\n      description: buzzing with data\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatasets can be imported by their slug, e.g.\n\n```sh\n$ pulumi import honeycombio:index/dataset:Dataset my_dataset my-dataset\n```\n\n",
      "properties": {
        "createdAt": {
          "type": "string",
          "description": "ISO8601-formatted time the dataset was created\n"
        },
        "deleteProtected": {
          "type": "boolean",
          "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
        },
        "description": {
          "type": "string",
          "description": "A longer description for dataset.\n"
        },
        "expandJsonDepth": {
          "type": "number",
          "description": "The maximum unpacking depth of nested JSON fields.\n"
        },
        "lastWrittenAt": {
          "type": "string",
          "description": "ISO8601-formatted time the dataset was last written to (received event data)\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the dataset.\n"
        },
        "slug": {
          "type": "string",
          "description": "The slug of the dataset.\n"
        }
      },
      "type": "object",
      "required": [
        "createdAt",
        "deleteProtected",
        "description",
        "expandJsonDepth",
        "lastWrittenAt",
        "name",
        "slug"
      ],
      "inputProperties": {
        "deleteProtected": {
          "type": "boolean",
          "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
        },
        "description": {
          "type": "string",
          "description": "A longer description for dataset.\n"
        },
        "expandJsonDepth": {
          "type": "number",
          "description": "The maximum unpacking depth of nested JSON fields.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the dataset.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Dataset resources.\n",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO8601-formatted time the dataset was created\n"
          },
          "deleteProtected": {
            "type": "boolean",
            "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
          },
          "description": {
            "type": "string",
            "description": "A longer description for dataset.\n"
          },
          "expandJsonDepth": {
            "type": "number",
            "description": "The maximum unpacking depth of nested JSON fields.\n"
          },
          "lastWrittenAt": {
            "type": "string",
            "description": "ISO8601-formatted time the dataset was last written to (received event data)\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the dataset.\n"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the dataset.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/datasetDefinition:DatasetDefinition": {
      "properties": {
        "column": {
          "type": "string",
          "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
        },
        "columnType": {
          "type": "string",
          "description": "The type of the column assigned to the definition. Either `column` or `derived_column`.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset to set the Dataset Definition for.\n"
        },
        "datasetDefinitionId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the definition being set.\n"
        }
      },
      "type": "object",
      "required": [
        "column",
        "columnType",
        "dataset",
        "datasetDefinitionId",
        "name"
      ],
      "inputProperties": {
        "column": {
          "type": "string",
          "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset to set the Dataset Definition for.\n"
        },
        "datasetDefinitionId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the definition being set.\n"
        }
      },
      "requiredInputs": [
        "column",
        "dataset"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DatasetDefinition resources.\n",
        "properties": {
          "column": {
            "type": "string",
            "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
          },
          "columnType": {
            "type": "string",
            "description": "The type of the column assigned to the definition. Either `column` or `derived_column`.\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset to set the Dataset Definition for.\n"
          },
          "datasetDefinitionId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the definition being set.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/derivedColumn:DerivedColumn": {
      "description": "## # Resource: honeycombio.DerivedColumn\n\nCreates a derived column. For more information about derived columns, check out [Calculate with derived columns](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst durationMsLog = new honeycombio.DerivedColumn(\"durationMsLog\", {\n    alias: \"duration_ms_log10\",\n    expression: \"LOG10($duration_ms)\",\n    description: \"LOG10 of duration_ms\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nduration_ms_log = honeycombio.DerivedColumn(\"durationMsLog\",\n    alias=\"duration_ms_log10\",\n    expression=\"LOG10($duration_ms)\",\n    description=\"LOG10 of duration_ms\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var durationMsLog = new Honeycombio.DerivedColumn(\"durationMsLog\", new()\n    {\n        Alias = \"duration_ms_log10\",\n        Expression = \"LOG10($duration_ms)\",\n        Description = \"LOG10 of duration_ms\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.NewDerivedColumn(ctx, \"durationMsLog\", \u0026honeycombio.DerivedColumnArgs{\n\t\t\tAlias:       pulumi.String(\"duration_ms_log10\"),\n\t\t\tExpression:  pulumi.String(\"LOG10($duration_ms)\"),\n\t\t\tDescription: pulumi.String(\"LOG10 of duration_ms\"),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.DerivedColumn;\nimport com.pulumi.honeycombio.DerivedColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        var durationMsLog = new DerivedColumn(\"durationMsLog\", DerivedColumnArgs.builder()\n            .alias(\"duration_ms_log10\")\n            .expression(\"LOG10($duration_ms)\")\n            .description(\"LOG10 of duration_ms\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  durationMsLog:\n    type: honeycombio:DerivedColumn\n    properties:\n      alias: duration_ms_log10\n      expression: LOG10($duration_ms)\n      description: LOG10 of duration_ms\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDerived columns can be imported using a combination of the dataset name and their alias, e.g.\n\n```sh\n$ pulumi import honeycombio:index/derivedColumn:DerivedColumn my_column my-dataset/duration_ms_log10\n```\n",
      "properties": {
        "alias": {
          "type": "string",
          "description": "The name of the derived column. Must be unique per dataset.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this derived column is added to. Use `__all__` for Environment-wide derived columns.\n"
        },
        "derivedColumnId": {
          "type": "string",
          "description": "ID of the derived column.\n"
        },
        "description": {
          "type": "string",
          "description": "A description that is shown in the UI.\n"
        },
        "expression": {
          "type": "string",
          "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
        }
      },
      "type": "object",
      "required": [
        "alias",
        "dataset",
        "derivedColumnId",
        "expression"
      ],
      "inputProperties": {
        "alias": {
          "type": "string",
          "description": "The name of the derived column. Must be unique per dataset.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this derived column is added to. Use `__all__` for Environment-wide derived columns.\n"
        },
        "derivedColumnId": {
          "type": "string",
          "description": "ID of the derived column.\n"
        },
        "description": {
          "type": "string",
          "description": "A description that is shown in the UI.\n"
        },
        "expression": {
          "type": "string",
          "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
        }
      },
      "requiredInputs": [
        "alias",
        "dataset",
        "expression"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DerivedColumn resources.\n",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The name of the derived column. Must be unique per dataset.\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this derived column is added to. Use `__all__` for Environment-wide derived columns.\n"
          },
          "derivedColumnId": {
            "type": "string",
            "description": "ID of the derived column.\n"
          },
          "description": {
            "type": "string",
            "description": "A description that is shown in the UI.\n"
          },
          "expression": {
            "type": "string",
            "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/emailRecipient:EmailRecipient": {
      "description": "## # Resource: honeycombio.EmailRecipient\n\n`honeycombio.EmailRecipient` allows you to define and manage an Email recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst alerts = new honeycombio.EmailRecipient(\"alerts\", {address: \"alerts@example.com\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nalerts = honeycombio.EmailRecipient(\"alerts\", address=\"alerts@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alerts = new Honeycombio.EmailRecipient(\"alerts\", new()\n    {\n        Address = \"alerts@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewEmailRecipient(ctx, \"alerts\", \u0026honeycombio.EmailRecipientArgs{\n\t\t\tAddress: pulumi.String(\"alerts@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.EmailRecipient;\nimport com.pulumi.honeycombio.EmailRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alerts = new EmailRecipient(\"alerts\", EmailRecipientArgs.builder()\n            .address(\"alerts@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alerts:\n    type: honeycombio:EmailRecipient\n    properties:\n      address: alerts@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEmail Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/emailRecipient:EmailRecipient my_recipient nx2zsegA0dZ\n```\n",
      "properties": {
        "address": {
          "type": "string",
          "description": "The email address to send the notification to.\n"
        },
        "emailRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "type": "object",
      "required": [
        "address",
        "emailRecipientId"
      ],
      "inputProperties": {
        "address": {
          "type": "string",
          "description": "The email address to send the notification to.\n"
        },
        "emailRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "requiredInputs": [
        "address"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering EmailRecipient resources.\n",
        "properties": {
          "address": {
            "type": "string",
            "description": "The email address to send the notification to.\n"
          },
          "emailRecipientId": {
            "type": "string",
            "description": "The ID of the recipient.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/environment:Environment": {
      "description": "## # Resource: honeycombio.Environment\n\nCreates a Honeycomb Environment.\n\n\u003e This resource requires the provider be configured with a Management Key with `environments:write` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst uat = new honeycombio.Environment(\"uat\", {color: \"green\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nuat = honeycombio.Environment(\"uat\", color=\"green\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var uat = new Honeycombio.Environment(\"uat\", new()\n    {\n        Color = \"green\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewEnvironment(ctx, \"uat\", \u0026honeycombio.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"green\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.Environment;\nimport com.pulumi.honeycombio.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var uat = new Environment(\"uat\", EnvironmentArgs.builder()\n            .color(\"green\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  uat:\n    type: honeycombio:Environment\n    properties:\n      color: green\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEnvironments can be imported by their ID. e.g.\n\n```sh\n$ pulumi import honeycombio:index/environment:Environment myenv hcaen_01j1jrsewaha3m0z6fwffpcrxg\n```\n",
      "properties": {
        "color": {
          "type": "string",
          "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
        },
        "deleteProtected": {
          "type": "boolean",
          "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
        },
        "description": {
          "type": "string",
          "description": "A description for the Environment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Environment. Must be unique to the Team.\n"
        },
        "slug": {
          "type": "string",
          "description": "The slug of the Environment.\n"
        }
      },
      "type": "object",
      "required": [
        "color",
        "deleteProtected",
        "description",
        "name",
        "slug"
      ],
      "inputProperties": {
        "color": {
          "type": "string",
          "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
        },
        "deleteProtected": {
          "type": "boolean",
          "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
        },
        "description": {
          "type": "string",
          "description": "A description for the Environment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Environment. Must be unique to the Team.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Environment resources.\n",
        "properties": {
          "color": {
            "type": "string",
            "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
          },
          "deleteProtected": {
            "type": "boolean",
            "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
          },
          "description": {
            "type": "string",
            "description": "A description for the Environment.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Environment. Must be unique to the Team.\n"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the Environment.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/marker:Marker": {
      "description": "## # Resource: honeycombio.Marker\n\nCreates a marker. For more information about markers, check out [Annotate the timeline with Markers](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/markers/).\n\n\u003e Destroying or replacing this resource will not delete the previously created marker.\nThis is intentional to preserve the markers.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst appVersion = config.require(\"appVersion\");\nconst marker = new honeycombio.Marker(\"marker\", {\n    message: `deploy ${appVersion}`,\n    type: \"deploy\",\n    url: \"http://www.example.com/\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\napp_version = config.require(\"appVersion\")\nmarker = honeycombio.Marker(\"marker\",\n    message=f\"deploy {app_version}\",\n    type=\"deploy\",\n    url=\"http://www.example.com/\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var appVersion = config.Require(\"appVersion\");\n    var marker = new Honeycombio.Marker(\"marker\", new()\n    {\n        Message = $\"deploy {appVersion}\",\n        Type = \"deploy\",\n        Url = \"http://www.example.com/\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tappVersion := cfg.Require(\"appVersion\")\n\t\t_, err := honeycombio.NewMarker(ctx, \"marker\", \u0026honeycombio.MarkerArgs{\n\t\t\tMessage: pulumi.Sprintf(\"deploy %v\", appVersion),\n\t\t\tType:    pulumi.String(\"deploy\"),\n\t\t\tUrl:     pulumi.String(\"http://www.example.com/\"),\n\t\t\tDataset: pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.Marker;\nimport com.pulumi.honeycombio.MarkerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var appVersion = config.get(\"appVersion\");\n        var marker = new Marker(\"marker\", MarkerArgs.builder()\n            .message(String.format(\"deploy %s\", appVersion))\n            .type(\"deploy\")\n            .url(\"http://www.example.com/\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  appVersion:\n    type: string\nresources:\n  marker:\n    type: honeycombio:Marker\n    properties:\n      message: deploy ${appVersion}\n      type: deploy\n      url: http://www.example.com/\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "properties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this marker is placed on. Use `__all__` for Environment-wide markers.\n"
        },
        "markerId": {
          "type": "string",
          "description": "ID of the marker.\n"
        },
        "message": {
          "type": "string",
          "description": "The message on the marker.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n"
        },
        "url": {
          "type": "string",
          "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n"
        }
      },
      "type": "object",
      "required": [
        "dataset",
        "markerId"
      ],
      "inputProperties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this marker is placed on. Use `__all__` for Environment-wide markers.\n"
        },
        "markerId": {
          "type": "string",
          "description": "ID of the marker.\n"
        },
        "message": {
          "type": "string",
          "description": "The message on the marker.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n"
        },
        "url": {
          "type": "string",
          "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n"
        }
      },
      "requiredInputs": [
        "dataset"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Marker resources.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this marker is placed on. Use `__all__` for Environment-wide markers.\n"
          },
          "markerId": {
            "type": "string",
            "description": "ID of the marker.\n"
          },
          "message": {
            "type": "string",
            "description": "The message on the marker.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n"
          },
          "url": {
            "type": "string",
            "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/markerSetting:MarkerSetting": {
      "description": "## # Resource: honeycombio.MarkerSetting\n\nCreates a marker setting.\nFor more information on marker settings, check out the [Marker Settings API](https://docs.honeycomb.io/api/marker-settings/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst type = config.require(\"type\");\nconst markerSetting = new honeycombio.MarkerSetting(\"markerSetting\", {\n    type: type,\n    color: \"#DF4661\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ntype = config.require(\"type\")\nmarker_setting = honeycombio.MarkerSetting(\"markerSetting\",\n    type=type,\n    color=\"#DF4661\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var type = config.Require(\"type\");\n    var markerSetting = new Honeycombio.MarkerSetting(\"markerSetting\", new()\n    {\n        Type = type,\n        Color = \"#DF4661\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_type := cfg.Require(\"type\")\n\t\t_, err := honeycombio.NewMarkerSetting(ctx, \"markerSetting\", \u0026honeycombio.MarkerSettingArgs{\n\t\t\tType:    pulumi.String(_type),\n\t\t\tColor:   pulumi.String(\"#DF4661\"),\n\t\t\tDataset: pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.MarkerSetting;\nimport com.pulumi.honeycombio.MarkerSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var type = config.get(\"type\");\n        var markerSetting = new MarkerSetting(\"markerSetting\", MarkerSettingArgs.builder()\n            .type(type)\n            .color(\"#DF4661\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  type:\n    type: string\nresources:\n  markerSetting:\n    type: honeycombio:MarkerSetting\n    properties:\n      type: ${type}\n      color: '#DF4661'\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "properties": {
        "color": {
          "type": "string",
          "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp when the marker setting was created.\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this marker setting is placed on. Use `__all__` for Environment-wide marker settings.\n"
        },
        "markerSettingId": {
          "type": "string",
          "description": "ID of the marker setting.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp when the marker setting was last modified.\n"
        }
      },
      "type": "object",
      "required": [
        "color",
        "createdAt",
        "dataset",
        "markerSettingId",
        "type",
        "updatedAt"
      ],
      "inputProperties": {
        "color": {
          "type": "string",
          "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this marker setting is placed on. Use `__all__` for Environment-wide marker settings.\n"
        },
        "markerSettingId": {
          "type": "string",
          "description": "ID of the marker setting.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
        }
      },
      "requiredInputs": [
        "color",
        "dataset",
        "type"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering MarkerSetting resources.\n",
        "properties": {
          "color": {
            "type": "string",
            "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when the marker setting was created.\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this marker setting is placed on. Use `__all__` for Environment-wide marker settings.\n"
          },
          "markerSettingId": {
            "type": "string",
            "description": "ID of the marker setting.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when the marker setting was last modified.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/msteamsRecipient:MsteamsRecipient": {
      "description": "## # Resource: honeycombio.MsteamsRecipient\n\n`honeycombio.MsteamsRecipient` allows you to define and manage an MSTeams recipient that can be used by Triggers or BurnAlerts notifications.\n\n!\u003e **Deprecated** Microsoft has deprecated Office 365 Connectors.\n  This resource will no longer allow creation of new recipients.\n  It is recommended you recreate your Teams recipients with the `honeycombio.MsteamsWorkflowRecipient` resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod = new honeycombio.MsteamsRecipient(\"prod\", {url: \"https://mycorp.webhook.office.com/webhookb2/abcd12345\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod = honeycombio.MsteamsRecipient(\"prod\", url=\"https://mycorp.webhook.office.com/webhookb2/abcd12345\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = new Honeycombio.MsteamsRecipient(\"prod\", new()\n    {\n        Url = \"https://mycorp.webhook.office.com/webhookb2/abcd12345\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewMsteamsRecipient(ctx, \"prod\", \u0026honeycombio.MsteamsRecipientArgs{\n\t\t\tUrl: pulumi.String(\"https://mycorp.webhook.office.com/webhookb2/abcd12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.MsteamsRecipient;\nimport com.pulumi.honeycombio.MsteamsRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod = new MsteamsRecipient(\"prod\", MsteamsRecipientArgs.builder()\n            .url(\"https://mycorp.webhook.office.com/webhookb2/abcd12345\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod:\n    type: honeycombio:MsteamsRecipient\n    properties:\n      url: https://mycorp.webhook.office.com/webhookb2/abcd12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nMSTeams Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/msteamsRecipient:MsteamsRecipient my_recipient nx2zsefB1cX\n```\n",
      "properties": {
        "msteamsRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the MS Teams Integration to create.\n"
        },
        "url": {
          "type": "string",
          "description": "The Incoming Webhook URL to send the notification to.\n"
        }
      },
      "type": "object",
      "required": [
        "msteamsRecipientId",
        "name",
        "url"
      ],
      "inputProperties": {
        "msteamsRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the MS Teams Integration to create.\n"
        },
        "url": {
          "type": "string",
          "description": "The Incoming Webhook URL to send the notification to.\n"
        }
      },
      "requiredInputs": [
        "url"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering MsteamsRecipient resources.\n",
        "properties": {
          "msteamsRecipientId": {
            "type": "string",
            "description": "The ID of the recipient.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the MS Teams Integration to create.\n"
          },
          "url": {
            "type": "string",
            "description": "The Incoming Webhook URL to send the notification to.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/msteamsWorkflowRecipient:MsteamsWorkflowRecipient": {
      "description": "## # Resource: honeycombio.MsteamsWorkflowRecipient\n\n`honeycombio.MsteamsWorkflowRecipient` allows you to define and manage an MSTeams Workflows recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod = new honeycombio.MsteamsWorkflowRecipient(\"prod\", {url: \"https://mycorp.westus.logic.azure.com/workflows/123456\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod = honeycombio.MsteamsWorkflowRecipient(\"prod\", url=\"https://mycorp.westus.logic.azure.com/workflows/123456\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = new Honeycombio.MsteamsWorkflowRecipient(\"prod\", new()\n    {\n        Url = \"https://mycorp.westus.logic.azure.com/workflows/123456\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewMsteamsWorkflowRecipient(ctx, \"prod\", \u0026honeycombio.MsteamsWorkflowRecipientArgs{\n\t\t\tUrl: pulumi.String(\"https://mycorp.westus.logic.azure.com/workflows/123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.MsteamsWorkflowRecipient;\nimport com.pulumi.honeycombio.MsteamsWorkflowRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod = new MsteamsWorkflowRecipient(\"prod\", MsteamsWorkflowRecipientArgs.builder()\n            .url(\"https://mycorp.westus.logic.azure.com/workflows/123456\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod:\n    type: honeycombio:MsteamsWorkflowRecipient\n    properties:\n      url: https://mycorp.westus.logic.azure.com/workflows/123456\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nMSTeams Workflow Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/msteamsWorkflowRecipient:MsteamsWorkflowRecipient my_recipient nx2zsefB1cX\n```\n",
      "properties": {
        "msteamsWorkflowRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the recipient.\n"
        },
        "url": {
          "type": "string",
          "description": "The MSTeams Workflow URL to send the notification to.\n"
        }
      },
      "type": "object",
      "required": [
        "msteamsWorkflowRecipientId",
        "name",
        "url"
      ],
      "inputProperties": {
        "msteamsWorkflowRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the recipient.\n"
        },
        "url": {
          "type": "string",
          "description": "The MSTeams Workflow URL to send the notification to.\n"
        }
      },
      "requiredInputs": [
        "url"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering MsteamsWorkflowRecipient resources.\n",
        "properties": {
          "msteamsWorkflowRecipientId": {
            "type": "string",
            "description": "The ID of the recipient.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the recipient.\n"
          },
          "url": {
            "type": "string",
            "description": "The MSTeams Workflow URL to send the notification to.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/pagerdutyRecipient:PagerdutyRecipient": {
      "description": "## # Resource: honeycombio.PagerdutyRecipient\n\n`honeycombio.PagerdutyRecipient` allows you to define and manage a PagerDuty recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod_oncall = new honeycombio.PagerdutyRecipient(\"prod-oncall\", {\n    integrationKey: \"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n    integrationName: \"Production on-call notifications\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod_oncall = honeycombio.PagerdutyRecipient(\"prod-oncall\",\n    integration_key=\"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n    integration_name=\"Production on-call notifications\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod_oncall = new Honeycombio.PagerdutyRecipient(\"prod-oncall\", new()\n    {\n        IntegrationKey = \"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n        IntegrationName = \"Production on-call notifications\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewPagerdutyRecipient(ctx, \"prod-oncall\", \u0026honeycombio.PagerdutyRecipientArgs{\n\t\t\tIntegrationKey:  pulumi.String(\"cd6e8de3c857aefc950e0d5ebcb79ac2\"),\n\t\t\tIntegrationName: pulumi.String(\"Production on-call notifications\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.PagerdutyRecipient;\nimport com.pulumi.honeycombio.PagerdutyRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod_oncall = new PagerdutyRecipient(\"prod-oncall\", PagerdutyRecipientArgs.builder()\n            .integrationKey(\"cd6e8de3c857aefc950e0d5ebcb79ac2\")\n            .integrationName(\"Production on-call notifications\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod-oncall:\n    type: honeycombio:PagerdutyRecipient\n    properties:\n      integrationKey: cd6e8de3c857aefc950e0d5ebcb79ac2\n      integrationName: Production on-call notifications\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPagerDuty Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/pagerdutyRecipient:PagerdutyRecipient my_recipient nx2zsegA0dZ\n```\n",
      "properties": {
        "integrationKey": {
          "type": "string",
          "description": "The key of the PagerDuty Integration to send the notification to.\n",
          "secret": true
        },
        "integrationName": {
          "type": "string",
          "description": "The name of the PagerDuty Integration to send the notification to.\n"
        },
        "pagerdutyRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "type": "object",
      "required": [
        "integrationKey",
        "integrationName",
        "pagerdutyRecipientId"
      ],
      "inputProperties": {
        "integrationKey": {
          "type": "string",
          "description": "The key of the PagerDuty Integration to send the notification to.\n",
          "secret": true
        },
        "integrationName": {
          "type": "string",
          "description": "The name of the PagerDuty Integration to send the notification to.\n"
        },
        "pagerdutyRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "requiredInputs": [
        "integrationKey",
        "integrationName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering PagerdutyRecipient resources.\n",
        "properties": {
          "integrationKey": {
            "type": "string",
            "description": "The key of the PagerDuty Integration to send the notification to.\n",
            "secret": true
          },
          "integrationName": {
            "type": "string",
            "description": "The name of the PagerDuty Integration to send the notification to.\n"
          },
          "pagerdutyRecipientId": {
            "type": "string",
            "description": "The ID of the recipient.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/query:Query": {
      "description": "## # Resource: honeycombio.Query\n\nCreates a Query scoped to a Dataset or Environment.\n\nQueries can be used by Triggers and Boards, or be executed via the [Query Data API](https://docs.honeycomb.io/api/query-results/).\n\n\u003e Queries are immutable and can not be deleted -- only created or read.\n  Any changes will result in a new query object being created.\n\n## Import\n\nQuerys can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/query:Query my_query my-dataset/bj8BwOa1uRz\n```\n",
      "properties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
        },
        "queryJson": {
          "type": "string",
          "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycombio.getQuerySpecification` data source provides deeper validation.\n"
        }
      },
      "type": "object",
      "required": [
        "dataset",
        "queryJson"
      ],
      "inputProperties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
        },
        "queryJson": {
          "type": "string",
          "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycombio.getQuerySpecification` data source provides deeper validation.\n"
        }
      },
      "requiredInputs": [
        "dataset",
        "queryJson"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Query resources.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
          },
          "queryJson": {
            "type": "string",
            "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycombio.getQuerySpecification` data source provides deeper validation.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/queryAnnotation:QueryAnnotation": {
      "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst testQueryQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"duration_ms\",\n        op: \"\u003e\",\n        value: \"10\",\n    }],\n});\nconst testQueryQuery = new honeycombio.Query(\"testQueryQuery\", {\n    dataset: dataset,\n    queryJson: testQueryQuerySpecification.then(testQueryQuerySpecification =\u003e testQueryQuerySpecification.json),\n});\nconst testAnnotation = new honeycombio.QueryAnnotation(\"testAnnotation\", {\n    dataset: dataset,\n    queryId: testQueryQuery.id,\n    description: \"Describes my cool query (optional)\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ntest_query_query_specification = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"duration_ms\",\n        \"op\": \"\u003e\",\n        \"value\": \"10\",\n    }])\ntest_query_query = honeycombio.Query(\"testQueryQuery\",\n    dataset=dataset,\n    query_json=test_query_query_specification.json)\ntest_annotation = honeycombio.QueryAnnotation(\"testAnnotation\",\n    dataset=dataset,\n    query_id=test_query_query.id,\n    description=\"Describes my cool query (optional)\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var testQueryQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"duration_ms\",\n                Op = \"\u003e\",\n                Value = \"10\",\n            },\n        },\n    });\n\n    var testQueryQuery = new Honeycombio.Query(\"testQueryQuery\", new()\n    {\n        Dataset = dataset,\n        QueryJson = testQueryQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var testAnnotation = new Honeycombio.QueryAnnotation(\"testAnnotation\", new()\n    {\n        Dataset = dataset,\n        QueryId = testQueryQuery.Id,\n        Description = \"Describes my cool query (optional)\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\ttestQueryQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"duration_ms\",\n\t\t\t\t\tOp:     \"\u003e\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"10\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestQueryQuery, err := honeycombio.NewQuery(ctx, \"testQueryQuery\", \u0026honeycombio.QueryArgs{\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tQueryJson: pulumi.String(testQueryQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewQueryAnnotation(ctx, \"testAnnotation\", \u0026honeycombio.QueryAnnotationArgs{\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tQueryId:     testQueryQuery.ID(),\n\t\t\tDescription: pulumi.String(\"Describes my cool query (optional)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Query;\nimport com.pulumi.honeycombio.QueryArgs;\nimport com.pulumi.honeycombio.QueryAnnotation;\nimport com.pulumi.honeycombio.QueryAnnotationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var testQueryQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"duration_ms\")\n                .op(\"\u003e\")\n                .value(10)\n                .build())\n            .build());\n\n        var testQueryQuery = new Query(\"testQueryQuery\", QueryArgs.builder()\n            .dataset(dataset)\n            .queryJson(testQueryQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var testAnnotation = new QueryAnnotation(\"testAnnotation\", QueryAnnotationArgs.builder()\n            .dataset(dataset)\n            .queryId(testQueryQuery.id())\n            .description(\"Describes my cool query (optional)\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  testQueryQuery:\n    type: honeycombio:Query\n    properties:\n      dataset: ${dataset}\n      queryJson: ${testQueryQuerySpecification.json}\n  testAnnotation:\n    type: honeycombio:QueryAnnotation\n    properties:\n      dataset: ${dataset}\n      queryId: ${testQueryQuery.id}\n      description: Describes my cool query (optional)\nvariables:\n  testQueryQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: duration_ms\n            op: '\u003e'\n            value: 10\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nQuery annotations cannot be imported.\n\n",
      "properties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this query annotation is added to. Use `__all__` for Environment-wide query annotations.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for the query annotation.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
        },
        "queryAnnotationId": {
          "type": "string",
          "description": "ID of the query annotation. Useful for adding it to a board.\n"
        },
        "queryId": {
          "type": "string",
          "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n"
        }
      },
      "type": "object",
      "required": [
        "dataset",
        "name",
        "queryAnnotationId",
        "queryId"
      ],
      "inputProperties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this query annotation is added to. Use `__all__` for Environment-wide query annotations.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for the query annotation.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
        },
        "queryAnnotationId": {
          "type": "string",
          "description": "ID of the query annotation. Useful for adding it to a board.\n"
        },
        "queryId": {
          "type": "string",
          "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n"
        }
      },
      "requiredInputs": [
        "dataset",
        "queryId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering QueryAnnotation resources.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this query annotation is added to. Use `__all__` for Environment-wide query annotations.\n"
          },
          "description": {
            "type": "string",
            "description": "The description for the query annotation.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
          },
          "queryAnnotationId": {
            "type": "string",
            "description": "ID of the query annotation. Useful for adding it to a board.\n"
          },
          "queryId": {
            "type": "string",
            "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/slackRecipient:SlackRecipient": {
      "description": "## # Resource: honeycombio.SlackRecipient\n\n`honeycombio.SlackRecipient` allows you to define and manage a Slack channel or user recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst alerts = new honeycombio.SlackRecipient(\"alerts\", {channel: \"#alerts\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nalerts = honeycombio.SlackRecipient(\"alerts\", channel=\"#alerts\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alerts = new Honeycombio.SlackRecipient(\"alerts\", new()\n    {\n        Channel = \"#alerts\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewSlackRecipient(ctx, \"alerts\", \u0026honeycombio.SlackRecipientArgs{\n\t\t\tChannel: pulumi.String(\"#alerts\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.SlackRecipient;\nimport com.pulumi.honeycombio.SlackRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alerts = new SlackRecipient(\"alerts\", SlackRecipientArgs.builder()\n            .channel(\"#alerts\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alerts:\n    type: honeycombio:SlackRecipient\n    properties:\n      channel: '#alerts'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSlack Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/slackRecipient:SlackRecipient my_recipient nx2zsegA0dZ\n```\n",
      "properties": {
        "channel": {
          "type": "string",
          "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@` or be a valid channel id e.g. `CABC123DEF.\n"
        },
        "slackRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "type": "object",
      "required": [
        "channel",
        "slackRecipientId"
      ],
      "inputProperties": {
        "channel": {
          "type": "string",
          "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@` or be a valid channel id e.g. `CABC123DEF.\n"
        },
        "slackRecipientId": {
          "type": "string",
          "description": "The ID of the recipient.\n"
        }
      },
      "requiredInputs": [
        "channel"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering SlackRecipient resources.\n",
        "properties": {
          "channel": {
            "type": "string",
            "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@` or be a valid channel id e.g. `CABC123DEF.\n"
          },
          "slackRecipientId": {
            "type": "string",
            "description": "The ID of the recipient.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/slo:Slo": {
      "description": "## # Resource: honeycombio.Slo\n\nCreates a service level objective (SLO). For more information about SLOs, check out [Set Service Level Objectives (SLOs)](https://docs.honeycomb.io/working-with-your-data/slos/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst requestLatencySli = new honeycombio.DerivedColumn(\"requestLatencySli\", {\n    alias: \"sli.request_latency\",\n    description: \"SLI: request latency less than 300ms\",\n    dataset: _var.dataset,\n    expression: fs.readFileSync(\"../sli/sli.request_latency.honeycomb\", \"utf8\"),\n});\nconst slo = new honeycombio.Slo(\"slo\", {\n    description: \"example of an SLO\",\n    dataset: _var.dataset,\n    sli: requestLatencySli.alias,\n    targetPercentage: 99.9,\n    timePeriod: 30,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nrequest_latency_sli = honeycombio.DerivedColumn(\"requestLatencySli\",\n    alias=\"sli.request_latency\",\n    description=\"SLI: request latency less than 300ms\",\n    dataset=var[\"dataset\"],\n    expression=(lambda path: open(path).read())(\"../sli/sli.request_latency.honeycomb\"))\nslo = honeycombio.Slo(\"slo\",\n    description=\"example of an SLO\",\n    dataset=var[\"dataset\"],\n    sli=request_latency_sli.alias,\n    target_percentage=99.9,\n    time_period=30)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var requestLatencySli = new Honeycombio.DerivedColumn(\"requestLatencySli\", new()\n    {\n        Alias = \"sli.request_latency\",\n        Description = \"SLI: request latency less than 300ms\",\n        Dataset = @var.Dataset,\n        Expression = File.ReadAllText(\"../sli/sli.request_latency.honeycomb\"),\n    });\n\n    var slo = new Honeycombio.Slo(\"slo\", new()\n    {\n        Description = \"example of an SLO\",\n        Dataset = @var.Dataset,\n        Sli = requestLatencySli.Alias,\n        TargetPercentage = 99.9,\n        TimePeriod = 30,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trequestLatencySli, err := honeycombio.NewDerivedColumn(ctx, \"requestLatencySli\", \u0026honeycombio.DerivedColumnArgs{\n\t\t\tAlias:       pulumi.String(\"sli.request_latency\"),\n\t\t\tDescription: pulumi.String(\"SLI: request latency less than 300ms\"),\n\t\t\tDataset:     pulumi.Any(_var.Dataset),\n\t\t\tExpression:  pulumi.String(readFileOrPanic(\"../sli/sli.request_latency.honeycomb\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewSlo(ctx, \"slo\", \u0026honeycombio.SloArgs{\n\t\t\tDescription:      pulumi.String(\"example of an SLO\"),\n\t\t\tDataset:          pulumi.Any(_var.Dataset),\n\t\t\tSli:              requestLatencySli.Alias,\n\t\t\tTargetPercentage: pulumi.Float64(99.9),\n\t\t\tTimePeriod:       pulumi.Float64(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.DerivedColumn;\nimport com.pulumi.honeycombio.DerivedColumnArgs;\nimport com.pulumi.honeycombio.Slo;\nimport com.pulumi.honeycombio.SloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var requestLatencySli = new DerivedColumn(\"requestLatencySli\", DerivedColumnArgs.builder()\n            .alias(\"sli.request_latency\")\n            .description(\"SLI: request latency less than 300ms\")\n            .dataset(var_.dataset())\n            .expression(Files.readString(Paths.get(\"../sli/sli.request_latency.honeycomb\")))\n            .build());\n\n        var slo = new Slo(\"slo\", SloArgs.builder()\n            .description(\"example of an SLO\")\n            .dataset(var_.dataset())\n            .sli(requestLatencySli.alias())\n            .targetPercentage(99.9)\n            .timePeriod(30)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  requestLatencySli:\n    type: honeycombio:DerivedColumn\n    properties:\n      alias: sli.request_latency\n      description: 'SLI: request latency less than 300ms'\n      dataset: ${var.dataset}\n      # heredoc also works\n      expression:\n        fn::readFile: ../sli/sli.request_latency.honeycomb\n  slo:\n    type: honeycombio:Slo\n    properties:\n      description: example of an SLO\n      dataset: ${var.dataset}\n      sli: ${requestLatencySli.alias}\n      targetPercentage: 99.9\n      timePeriod: 30\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSLOs can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/slo:Slo my_slo my-dataset/bj9BwOb1uKz\n```\nYou can find the ID in the URL bar when visiting the SLO from the UI.\n\n",
      "properties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n"
        },
        "description": {
          "type": "string",
          "description": "A description of the SLO's intent and context.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the SLO.\n"
        },
        "sli": {
          "type": "string",
          "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
        },
        "sloId": {
          "type": "string",
          "description": "ID of the SLO.\n"
        },
        "targetPercentage": {
          "type": "number",
          "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
        },
        "timePeriod": {
          "type": "number",
          "description": "The time period, in days, over which your SLO will be evaluated.\n"
        }
      },
      "type": "object",
      "required": [
        "dataset",
        "name",
        "sli",
        "sloId",
        "targetPercentage",
        "timePeriod"
      ],
      "inputProperties": {
        "dataset": {
          "type": "string",
          "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n"
        },
        "description": {
          "type": "string",
          "description": "A description of the SLO's intent and context.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the SLO.\n"
        },
        "sli": {
          "type": "string",
          "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
        },
        "sloId": {
          "type": "string",
          "description": "ID of the SLO.\n"
        },
        "targetPercentage": {
          "type": "number",
          "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
        },
        "timePeriod": {
          "type": "number",
          "description": "The time period, in days, over which your SLO will be evaluated.\n"
        }
      },
      "requiredInputs": [
        "dataset",
        "sli",
        "targetPercentage",
        "timePeriod"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Slo resources.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n"
          },
          "description": {
            "type": "string",
            "description": "A description of the SLO's intent and context.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the SLO.\n"
          },
          "sli": {
            "type": "string",
            "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
          },
          "sloId": {
            "type": "string",
            "description": "ID of the SLO.\n"
          },
          "targetPercentage": {
            "type": "number",
            "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
          },
          "timePeriod": {
            "type": "number",
            "description": "The time period, in days, over which your SLO will be evaluated.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/trigger:Trigger": {
      "description": "## # Resource: honeycombio.Trigger\n\nCreates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).\n\n## Example Usage\n\n### Basic Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst exampleQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    timeRange: 1800,\n});\nconst exampleTrigger = new honeycombio.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryJson: exampleQuerySpecification.then(exampleQuerySpecification =\u003e exampleQuerySpecification.json),\n    dataset: dataset,\n    frequency: 600,\n    alertType: \"on_change\",\n    thresholds: [{\n        op: \"\u003e\",\n        value: 1000,\n    }],\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"marker\",\n            target: \"Trigger - requests are slow\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nexample_query_specification = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    time_range=1800)\nexample_trigger = honeycombio.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_json=example_query_specification.json,\n    dataset=dataset,\n    frequency=600,\n    alert_type=\"on_change\",\n    thresholds=[{\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    }],\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"marker\",\n            \"target\": \"Trigger - requests are slow\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var exampleQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        TimeRange = 1800,\n    });\n\n    var exampleTrigger = new Honeycombio.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryJson = exampleQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = dataset,\n        Frequency = 600,\n        AlertType = \"on_change\",\n        Thresholds = new[]\n        {\n            new Honeycombio.Inputs.TriggerThresholdArgs\n            {\n                Op = \"\u003e\",\n                Value = 1000,\n            },\n        },\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Type = \"marker\",\n                Target = \"Trigger - requests are slow\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\texampleQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeRange: pulumi.Float64Ref(1800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycombio.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryJson:   pulumi.String(exampleQuerySpecification.Json),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Float64(600),\n\t\t\tAlertType:   pulumi.String(\"on_change\"),\n\t\t\tThresholds: honeycombio.TriggerThresholdArray{\n\t\t\t\t\u0026honeycombio.TriggerThresholdArgs{\n\t\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecipients: honeycombio.TriggerRecipientArray{\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"marker\"),\n\t\t\t\t\tTarget: pulumi.String(\"Trigger - requests are slow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Trigger;\nimport com.pulumi.honeycombio.TriggerArgs;\nimport com.pulumi.honeycombio.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycombio.inputs.TriggerRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var exampleQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .timeRange(1800)\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryJson(exampleQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(dataset)\n            .frequency(600)\n            .alertType(\"on_change\")\n            .thresholds(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(            \n                TriggerRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                TriggerRecipientArgs.builder()\n                    .type(\"marker\")\n                    .target(\"Trigger - requests are slow\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycombio:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryJson: ${exampleQuerySpecification.json}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      alertType: on_change # on_change is default, on_true can refers to the \"Alert on True\" checkbox in the UI\n      thresholds:\n        - op: '\u003e'\n          value: 1000\n      # zero or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: marker\n          target: Trigger - requests are slow\nvariables:\n  exampleQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        timeRange: 1800\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with PagerDuty Recipient and Severity\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst pdProd = honeycombio.getRecipient({\n    type: \"pagerduty\",\n    detailFilter: {\n        name: \"integration_name\",\n        value: \"Prod On-Call\",\n    },\n});\nconst exampleQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n});\nconst exampleTrigger = new honeycombio.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryJson: exampleQuerySpecification.then(exampleQuerySpecification =\u003e exampleQuerySpecification.json),\n    dataset: dataset,\n    frequency: 600,\n    thresholds: [{\n        op: \"\u003e\",\n        value: 1000,\n        exceededLimit: 3,\n    }],\n    recipients: [{\n        id: pdProd.then(pdProd =\u003e pdProd.id),\n        notificationDetails: [{\n            pagerdutySeverity: \"warning\",\n        }],\n    }],\n    evaluationSchedules: [{\n        startTime: \"13:00\",\n        endTime: \"21:00\",\n        daysOfWeeks: [\n            \"monday\",\n            \"wednesday\",\n            \"friday\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\npd_prod = honeycombio.get_recipient(type=\"pagerduty\",\n    detail_filter={\n        \"name\": \"integration_name\",\n        \"value\": \"Prod On-Call\",\n    })\nexample_query_specification = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }])\nexample_trigger = honeycombio.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_json=example_query_specification.json,\n    dataset=dataset,\n    frequency=600,\n    thresholds=[{\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n        \"exceeded_limit\": 3,\n    }],\n    recipients=[{\n        \"id\": pd_prod.id,\n        \"notification_details\": [{\n            \"pagerduty_severity\": \"warning\",\n        }],\n    }],\n    evaluation_schedules=[{\n        \"start_time\": \"13:00\",\n        \"end_time\": \"21:00\",\n        \"days_of_weeks\": [\n            \"monday\",\n            \"wednesday\",\n            \"friday\",\n        ],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var pdProd = Honeycombio.GetRecipient.Invoke(new()\n    {\n        Type = \"pagerduty\",\n        DetailFilter = new Honeycombio.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"integration_name\",\n            Value = \"Prod On-Call\",\n        },\n    });\n\n    var exampleQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n    });\n\n    var exampleTrigger = new Honeycombio.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryJson = exampleQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = dataset,\n        Frequency = 600,\n        Thresholds = new[]\n        {\n            new Honeycombio.Inputs.TriggerThresholdArgs\n            {\n                Op = \"\u003e\",\n                Value = 1000,\n                ExceededLimit = 3,\n            },\n        },\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Id = pdProd.Apply(getRecipientResult =\u003e getRecipientResult.Id),\n                NotificationDetails = new[]\n                {\n                    new Honeycombio.Inputs.TriggerRecipientNotificationDetailArgs\n                    {\n                        PagerdutySeverity = \"warning\",\n                    },\n                },\n            },\n        },\n        EvaluationSchedules = new[]\n        {\n            new Honeycombio.Inputs.TriggerEvaluationScheduleArgs\n            {\n                StartTime = \"13:00\",\n                EndTime = \"21:00\",\n                DaysOfWeeks = new[]\n                {\n                    \"monday\",\n                    \"wednesday\",\n                    \"friday\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tpdProd, err := honeycombio.GetRecipient(ctx, \u0026honeycombio.GetRecipientArgs{\n\t\t\tType: \"pagerduty\",\n\t\t\tDetailFilter: honeycombio.GetRecipientDetailFilter{\n\t\t\t\tName:  \"integration_name\",\n\t\t\t\tValue: pulumi.StringRef(\"Prod On-Call\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycombio.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryJson:   pulumi.String(exampleQuerySpecification.Json),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Float64(600),\n\t\t\tThresholds: honeycombio.TriggerThresholdArray{\n\t\t\t\t\u0026honeycombio.TriggerThresholdArgs{\n\t\t\t\t\tOp:            pulumi.String(\"\u003e\"),\n\t\t\t\t\tValue:         pulumi.Float64(1000),\n\t\t\t\t\tExceededLimit: pulumi.Float64(3),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecipients: honeycombio.TriggerRecipientArray{\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tId: pulumi.String(pdProd.Id),\n\t\t\t\t\tNotificationDetails: honeycombio.TriggerRecipientNotificationDetailArray{\n\t\t\t\t\t\t\u0026honeycombio.TriggerRecipientNotificationDetailArgs{\n\t\t\t\t\t\t\tPagerdutySeverity: pulumi.String(\"warning\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEvaluationSchedules: honeycombio.TriggerEvaluationScheduleArray{\n\t\t\t\t\u0026honeycombio.TriggerEvaluationScheduleArgs{\n\t\t\t\t\tStartTime: pulumi.String(\"13:00\"),\n\t\t\t\t\tEndTime:   pulumi.String(\"21:00\"),\n\t\t\t\t\tDaysOfWeeks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monday\"),\n\t\t\t\t\t\tpulumi.String(\"wednesday\"),\n\t\t\t\t\t\tpulumi.String(\"friday\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientArgs;\nimport com.pulumi.honeycombio.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Trigger;\nimport com.pulumi.honeycombio.TriggerArgs;\nimport com.pulumi.honeycombio.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycombio.inputs.TriggerRecipientArgs;\nimport com.pulumi.honeycombio.inputs.TriggerEvaluationScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var pdProd = HoneycombioFunctions.getRecipient(GetRecipientArgs.builder()\n            .type(\"pagerduty\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"integration_name\")\n                .value(\"Prod On-Call\")\n                .build())\n            .build());\n\n        final var exampleQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryJson(exampleQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(dataset)\n            .frequency(600)\n            .thresholds(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .exceededLimit(3)\n                .build())\n            .recipients(TriggerRecipientArgs.builder()\n                .id(pdProd.applyValue(getRecipientResult -\u003e getRecipientResult.id()))\n                .notificationDetails(TriggerRecipientNotificationDetailArgs.builder()\n                    .pagerdutySeverity(\"warning\")\n                    .build())\n                .build())\n            .evaluationSchedules(TriggerEvaluationScheduleArgs.builder()\n                .startTime(\"13:00\")\n                .endTime(\"21:00\")\n                .daysOfWeeks(                \n                    \"monday\",\n                    \"wednesday\",\n                    \"friday\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycombio:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryJson: ${exampleQuerySpecification.json}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      thresholds:\n        - op: '\u003e'\n          value: 1000\n          exceededLimit: 3\n      recipients:\n        - id: ${pdProd.id}\n          notificationDetails:\n            - pagerdutySeverity: warning\n      evaluationSchedules:\n        - startTime: 13:00\n          endTime: 21:00\n          daysOfWeeks:\n            - monday\n            - wednesday\n            - friday\nvariables:\n  pdProd:\n    fn::invoke:\n      function: honeycombio:getRecipient\n      arguments:\n        type: pagerduty\n        detailFilter:\n          name: integration_name\n          value: Prod On-Call\n  exampleQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n```\n\u003c!--End PulumiCodeChooser --\u003e\n### Example - Example with Webhook Recipient and Notification Variable\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst customWebhook = honeycombio.getRecipient({\n    type: \"webhook\",\n    detailFilter: {\n        name: \"name\",\n        value: \"My Custom Webhook\",\n    },\n});\nconst exampleQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n});\nconst exampleTrigger = new honeycombio.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryJson: exampleQuerySpecification.then(exampleQuerySpecification =\u003e exampleQuerySpecification.json),\n    dataset: dataset,\n    frequency: 600,\n    thresholds: [{\n        op: \"\u003e\",\n        value: 1000,\n        exceededLimit: 3,\n    }],\n    recipients: [{\n        id: customWebhook.then(customWebhook =\u003e customWebhook.id),\n        notificationDetails: [{\n            variables: [{\n                name: \"severity\",\n                value: \"info\",\n            }],\n        }],\n    }],\n    evaluationSchedules: [{\n        startTime: \"13:00\",\n        endTime: \"21:00\",\n        daysOfWeeks: [\n            \"monday\",\n            \"wednesday\",\n            \"friday\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ncustom_webhook = honeycombio.get_recipient(type=\"webhook\",\n    detail_filter={\n        \"name\": \"name\",\n        \"value\": \"My Custom Webhook\",\n    })\nexample_query_specification = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }])\nexample_trigger = honeycombio.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_json=example_query_specification.json,\n    dataset=dataset,\n    frequency=600,\n    thresholds=[{\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n        \"exceeded_limit\": 3,\n    }],\n    recipients=[{\n        \"id\": custom_webhook.id,\n        \"notification_details\": [{\n            \"variables\": [{\n                \"name\": \"severity\",\n                \"value\": \"info\",\n            }],\n        }],\n    }],\n    evaluation_schedules=[{\n        \"start_time\": \"13:00\",\n        \"end_time\": \"21:00\",\n        \"days_of_weeks\": [\n            \"monday\",\n            \"wednesday\",\n            \"friday\",\n        ],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var customWebhook = Honeycombio.GetRecipient.Invoke(new()\n    {\n        Type = \"webhook\",\n        DetailFilter = new Honeycombio.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"name\",\n            Value = \"My Custom Webhook\",\n        },\n    });\n\n    var exampleQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n    });\n\n    var exampleTrigger = new Honeycombio.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryJson = exampleQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = dataset,\n        Frequency = 600,\n        Thresholds = new[]\n        {\n            new Honeycombio.Inputs.TriggerThresholdArgs\n            {\n                Op = \"\u003e\",\n                Value = 1000,\n                ExceededLimit = 3,\n            },\n        },\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Id = customWebhook.Apply(getRecipientResult =\u003e getRecipientResult.Id),\n                NotificationDetails = new[]\n                {\n                    new Honeycombio.Inputs.TriggerRecipientNotificationDetailArgs\n                    {\n                        Variables = new[]\n                        {\n                            new Honeycombio.Inputs.TriggerRecipientNotificationDetailVariableArgs\n                            {\n                                Name = \"severity\",\n                                Value = \"info\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        EvaluationSchedules = new[]\n        {\n            new Honeycombio.Inputs.TriggerEvaluationScheduleArgs\n            {\n                StartTime = \"13:00\",\n                EndTime = \"21:00\",\n                DaysOfWeeks = new[]\n                {\n                    \"monday\",\n                    \"wednesday\",\n                    \"friday\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tcustomWebhook, err := honeycombio.GetRecipient(ctx, \u0026honeycombio.GetRecipientArgs{\n\t\t\tType: \"webhook\",\n\t\t\tDetailFilter: honeycombio.GetRecipientDetailFilter{\n\t\t\t\tName:  \"name\",\n\t\t\t\tValue: pulumi.StringRef(\"My Custom Webhook\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycombio.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryJson:   pulumi.String(exampleQuerySpecification.Json),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Float64(600),\n\t\t\tThresholds: honeycombio.TriggerThresholdArray{\n\t\t\t\t\u0026honeycombio.TriggerThresholdArgs{\n\t\t\t\t\tOp:            pulumi.String(\"\u003e\"),\n\t\t\t\t\tValue:         pulumi.Float64(1000),\n\t\t\t\t\tExceededLimit: pulumi.Float64(3),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecipients: honeycombio.TriggerRecipientArray{\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tId: pulumi.String(customWebhook.Id),\n\t\t\t\t\tNotificationDetails: honeycombio.TriggerRecipientNotificationDetailArray{\n\t\t\t\t\t\t\u0026honeycombio.TriggerRecipientNotificationDetailArgs{\n\t\t\t\t\t\t\tVariables: honeycombio.TriggerRecipientNotificationDetailVariableArray{\n\t\t\t\t\t\t\t\t\u0026honeycombio.TriggerRecipientNotificationDetailVariableArgs{\n\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"severity\"),\n\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"info\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEvaluationSchedules: honeycombio.TriggerEvaluationScheduleArray{\n\t\t\t\t\u0026honeycombio.TriggerEvaluationScheduleArgs{\n\t\t\t\t\tStartTime: pulumi.String(\"13:00\"),\n\t\t\t\t\tEndTime:   pulumi.String(\"21:00\"),\n\t\t\t\t\tDaysOfWeeks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monday\"),\n\t\t\t\t\t\tpulumi.String(\"wednesday\"),\n\t\t\t\t\t\tpulumi.String(\"friday\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientArgs;\nimport com.pulumi.honeycombio.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Trigger;\nimport com.pulumi.honeycombio.TriggerArgs;\nimport com.pulumi.honeycombio.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycombio.inputs.TriggerRecipientArgs;\nimport com.pulumi.honeycombio.inputs.TriggerEvaluationScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var customWebhook = HoneycombioFunctions.getRecipient(GetRecipientArgs.builder()\n            .type(\"webhook\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"name\")\n                .value(\"My Custom Webhook\")\n                .build())\n            .build());\n\n        final var exampleQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryJson(exampleQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(dataset)\n            .frequency(600)\n            .thresholds(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .exceededLimit(3)\n                .build())\n            .recipients(TriggerRecipientArgs.builder()\n                .id(customWebhook.applyValue(getRecipientResult -\u003e getRecipientResult.id()))\n                .notificationDetails(TriggerRecipientNotificationDetailArgs.builder()\n                    .variables(TriggerRecipientNotificationDetailVariableArgs.builder()\n                        .name(\"severity\")\n                        .value(\"info\")\n                        .build())\n                    .build())\n                .build())\n            .evaluationSchedules(TriggerEvaluationScheduleArgs.builder()\n                .startTime(\"13:00\")\n                .endTime(\"21:00\")\n                .daysOfWeeks(                \n                    \"monday\",\n                    \"wednesday\",\n                    \"friday\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycombio:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryJson: ${exampleQuerySpecification.json}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      thresholds:\n        - op: '\u003e'\n          value: 1000\n          exceededLimit: 3\n      recipients:\n        - id: ${customWebhook.id}\n          notificationDetails:\n            - variables:\n                - name: severity\n                  value: info\n      evaluationSchedules:\n        - startTime: 13:00\n          endTime: 21:00\n          daysOfWeeks:\n            - monday\n            - wednesday\n            - friday\nvariables:\n  customWebhook:\n    fn::invoke:\n      function: honeycombio:getRecipient\n      arguments:\n        type: webhook\n        detailFilter:\n          name: name\n          value: My Custom Webhook\n  exampleQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTriggers can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G\n```\nYou can find the ID in the URL bar when visiting the trigger from the UI.\n\n",
      "properties": {
        "alertType": {
          "type": "string",
          "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this trigger is associated with.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the trigger.\n"
        },
        "disabled": {
          "type": "boolean",
          "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
        },
        "evaluationSchedules": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerEvaluationSchedule:TriggerEvaluationSchedule"
          },
          "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
        },
        "frequency": {
          "type": "number",
          "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the trigger.\n"
        },
        "queryId": {
          "type": "string",
          "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
        },
        "queryJson": {
          "type": "string",
          "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerRecipient:TriggerRecipient"
          },
          "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerThreshold:TriggerThreshold"
          },
          "description": "A configuration block (described below) describing the threshold of the trigger.\n"
        }
      },
      "type": "object",
      "required": [
        "alertType",
        "dataset",
        "description",
        "disabled",
        "frequency",
        "name"
      ],
      "inputProperties": {
        "alertType": {
          "type": "string",
          "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
        },
        "dataset": {
          "type": "string",
          "description": "The dataset this trigger is associated with.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the trigger.\n"
        },
        "disabled": {
          "type": "boolean",
          "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
        },
        "evaluationSchedules": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerEvaluationSchedule:TriggerEvaluationSchedule"
          },
          "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
        },
        "frequency": {
          "type": "number",
          "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the trigger.\n"
        },
        "queryId": {
          "type": "string",
          "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
        },
        "queryJson": {
          "type": "string",
          "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerRecipient:TriggerRecipient"
          },
          "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FTriggerThreshold:TriggerThreshold"
          },
          "description": "A configuration block (described below) describing the threshold of the trigger.\n"
        }
      },
      "requiredInputs": [
        "dataset"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Trigger resources.\n",
        "properties": {
          "alertType": {
            "type": "string",
            "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this trigger is associated with.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the trigger.\n"
          },
          "disabled": {
            "type": "boolean",
            "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
          },
          "evaluationSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FTriggerEvaluationSchedule:TriggerEvaluationSchedule"
            },
            "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
          },
          "frequency": {
            "type": "number",
            "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
          },
          "name": {
            "type": "string",
            "description": "Name of the trigger.\n"
          },
          "queryId": {
            "type": "string",
            "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
          },
          "queryJson": {
            "type": "string",
            "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FTriggerRecipient:TriggerRecipient"
            },
            "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FTriggerThreshold:TriggerThreshold"
            },
            "description": "A configuration block (described below) describing the threshold of the trigger.\n"
          }
        },
        "type": "object"
      }
    },
    "honeycombio:index/webhookRecipient:WebhookRecipient": {
      "description": "## # Resource: honeycombio.WebhookRecipient\n\n`honeycombio.WebhookRecipient` allows you to define and manage a Webhook recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Standard Webhook Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod = new honeycombio.WebhookRecipient(\"prod\", {\n    secret: \"a63dab148496ecbe04a1a802ca9b95b8\",\n    url: \"https://my.url.corp.net\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod = honeycombio.WebhookRecipient(\"prod\",\n    secret=\"a63dab148496ecbe04a1a802ca9b95b8\",\n    url=\"https://my.url.corp.net\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = new Honeycombio.WebhookRecipient(\"prod\", new()\n    {\n        Secret = \"a63dab148496ecbe04a1a802ca9b95b8\",\n        Url = \"https://my.url.corp.net\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewWebhookRecipient(ctx, \"prod\", \u0026honeycombio.WebhookRecipientArgs{\n\t\t\tSecret: pulumi.String(\"a63dab148496ecbe04a1a802ca9b95b8\"),\n\t\t\tUrl:    pulumi.String(\"https://my.url.corp.net\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.WebhookRecipient;\nimport com.pulumi.honeycombio.WebhookRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod = new WebhookRecipient(\"prod\", WebhookRecipientArgs.builder()\n            .secret(\"a63dab148496ecbe04a1a802ca9b95b8\")\n            .url(\"https://my.url.corp.net\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod:\n    type: honeycombio:WebhookRecipient\n    properties:\n      secret: a63dab148496ecbe04a1a802ca9b95b8\n      url: https://my.url.corp.net\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Custom Webhook Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod = new honeycombio.WebhookRecipient(\"prod\", {\n    headers: [{\n        name: \"Authorization\",\n        value: \"Bearer 123\",\n    }],\n    secret: \"a63dab148496ecbe04a1a802ca9b95b8\",\n    templates: [{\n        body: `\\x09\\x09{\n\\x09\\x09\\x09\"name\": \" {{ .Name }}\",\n\\x09\\x09\\x09\"id\": \" {{ .ID }}\",\n\\x09\\x09\\x09\"description\": \" {{ .Description }}\",\n            \"threshold\": {\n              \"op\": \"{{ .Operator }}\",\n              \"value\": \"{{ .Threshold }}\"\n            },\n\\x09\\x09}\n\\x09\\x09\n`,\n        type: \"trigger\",\n    }],\n    url: \"https://my.url.corp.net\",\n    variables: [{\n        defaultValue: \"critical\",\n        name: \"severity\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod = honeycombio.WebhookRecipient(\"prod\",\n    headers=[{\n        \"name\": \"Authorization\",\n        \"value\": \"Bearer 123\",\n    }],\n    secret=\"a63dab148496ecbe04a1a802ca9b95b8\",\n    templates=[{\n        \"body\": \"\"\"\\x09\\x09{\n\\x09\\x09\\x09\"name\": \" {{ .Name }}\",\n\\x09\\x09\\x09\"id\": \" {{ .ID }}\",\n\\x09\\x09\\x09\"description\": \" {{ .Description }}\",\n            \"threshold\": {\n              \"op\": \"{{ .Operator }}\",\n              \"value\": \"{{ .Threshold }}\"\n            },\n\\x09\\x09}\n\\x09\\x09\n\"\"\",\n        \"type\": \"trigger\",\n    }],\n    url=\"https://my.url.corp.net\",\n    variables=[{\n        \"default_value\": \"critical\",\n        \"name\": \"severity\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = new Honeycombio.WebhookRecipient(\"prod\", new()\n    {\n        Headers = new[]\n        {\n            new Honeycombio.Inputs.WebhookRecipientHeaderArgs\n            {\n                Name = \"Authorization\",\n                Value = \"Bearer 123\",\n            },\n        },\n        Secret = \"a63dab148496ecbe04a1a802ca9b95b8\",\n        Templates = new[]\n        {\n            new Honeycombio.Inputs.WebhookRecipientTemplateArgs\n            {\n                Body = @\"\t\t{\n\t\t\t\"\"name\"\": \"\" {{ .Name }}\"\",\n\t\t\t\"\"id\"\": \"\" {{ .ID }}\"\",\n\t\t\t\"\"description\"\": \"\" {{ .Description }}\"\",\n            \"\"threshold\"\": {\n              \"\"op\"\": \"\"{{ .Operator }}\"\",\n              \"\"value\"\": \"\"{{ .Threshold }}\"\"\n            },\n\t\t}\n\t\t\n\",\n                Type = \"trigger\",\n            },\n        },\n        Url = \"https://my.url.corp.net\",\n        Variables = new[]\n        {\n            new Honeycombio.Inputs.WebhookRecipientVariableArgs\n            {\n                DefaultValue = \"critical\",\n                Name = \"severity\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.NewWebhookRecipient(ctx, \"prod\", \u0026honeycombio.WebhookRecipientArgs{\n\t\t\tHeaders: honeycombio.WebhookRecipientHeaderArray{\n\t\t\t\t\u0026honeycombio.WebhookRecipientHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"Authorization\"),\n\t\t\t\t\tValue: pulumi.String(\"Bearer 123\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecret: pulumi.String(\"a63dab148496ecbe04a1a802ca9b95b8\"),\n\t\t\tTemplates: honeycombio.WebhookRecipientTemplateArray{\n\t\t\t\t\u0026honeycombio.WebhookRecipientTemplateArgs{\n\t\t\t\t\tBody: pulumi.String(`\t\t{\n\t\t\t\"name\": \" {{ .Name }}\",\n\t\t\t\"id\": \" {{ .ID }}\",\n\t\t\t\"description\": \" {{ .Description }}\",\n            \"threshold\": {\n              \"op\": \"{{ .Operator }}\",\n              \"value\": \"{{ .Threshold }}\"\n            },\n\t\t}\n\t\t\n`),\n\t\t\t\t\tType: pulumi.String(\"trigger\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://my.url.corp.net\"),\n\t\t\tVariables: honeycombio.WebhookRecipientVariableArray{\n\t\t\t\t\u0026honeycombio.WebhookRecipientVariableArgs{\n\t\t\t\t\tDefaultValue: pulumi.String(\"critical\"),\n\t\t\t\t\tName:         pulumi.String(\"severity\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.WebhookRecipient;\nimport com.pulumi.honeycombio.WebhookRecipientArgs;\nimport com.pulumi.honeycombio.inputs.WebhookRecipientHeaderArgs;\nimport com.pulumi.honeycombio.inputs.WebhookRecipientTemplateArgs;\nimport com.pulumi.honeycombio.inputs.WebhookRecipientVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod = new WebhookRecipient(\"prod\", WebhookRecipientArgs.builder()\n            .headers(WebhookRecipientHeaderArgs.builder()\n                .name(\"Authorization\")\n                .value(\"Bearer 123\")\n                .build())\n            .secret(\"a63dab148496ecbe04a1a802ca9b95b8\")\n            .templates(WebhookRecipientTemplateArgs.builder()\n                .body(\"\"\"\n\t\t{\n\t\t\t\"name\": \" {{ .Name }}\",\n\t\t\t\"id\": \" {{ .ID }}\",\n\t\t\t\"description\": \" {{ .Description }}\",\n            \"threshold\": {\n              \"op\": \"{{ .Operator }}\",\n              \"value\": \"{{ .Threshold }}\"\n            },\n\t\t}\n\t\t\n                \"\"\")\n                .type(\"trigger\")\n                .build())\n            .url(\"https://my.url.corp.net\")\n            .variables(WebhookRecipientVariableArgs.builder()\n                .defaultValue(\"critical\")\n                .name(\"severity\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod:\n    type: honeycombio:WebhookRecipient\n    properties:\n      headers:\n        - name: Authorization\n          value: Bearer 123\n      secret: a63dab148496ecbe04a1a802ca9b95b8\n      templates:\n        - body: |\n            \t\t{\n            \t\t\t\"name\": \" {{ .Name }}\",\n            \t\t\t\"id\": \" {{ .ID }}\",\n            \t\t\t\"description\": \" {{ .Description }}\",\n                        \"threshold\": {\n                          \"op\": \"{{ .Operator }}\",\n                          \"value\": \"{{ .Threshold }}\"\n                        },\n            \t\t}\n            \t\t\n          type: trigger\n      url: https://my.url.corp.net\n      variables:\n        - defaultValue: critical\n          name: severity\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhook Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycombio:index/webhookRecipient:WebhookRecipient my_recipient nx2zsegA0dZ\n```\n",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientHeader:WebhookRecipientHeader"
          },
          "description": "Zero or more configuration blocks (described below) to add custom webhook headers if desired.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Webhook Integration to create.\n"
        },
        "secret": {
          "type": "string",
          "description": "The secret to include when sending the notification to the webhook.\n",
          "secret": true
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientTemplate:WebhookRecipientTemplate"
          },
          "description": "Zero or more configuration blocks (described below) to customize the webhook payload if desired.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL of the endpoint to send the notification to.\n"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientVariable:WebhookRecipientVariable"
          },
          "description": "Zero or more configuration blocks (described below) to define variables to be used in the webhook payload if desired.\n"
        }
      },
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "inputProperties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientHeader:WebhookRecipientHeader"
          },
          "description": "Zero or more configuration blocks (described below) to add custom webhook headers if desired.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Webhook Integration to create.\n"
        },
        "secret": {
          "type": "string",
          "description": "The secret to include when sending the notification to the webhook.\n",
          "secret": true
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientTemplate:WebhookRecipientTemplate"
          },
          "description": "Zero or more configuration blocks (described below) to customize the webhook payload if desired.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL of the endpoint to send the notification to.\n"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/types/honeycombio:index%2FWebhookRecipientVariable:WebhookRecipientVariable"
          },
          "description": "Zero or more configuration blocks (described below) to define variables to be used in the webhook payload if desired.\n"
        }
      },
      "requiredInputs": [
        "url"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering WebhookRecipient resources.\n",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FWebhookRecipientHeader:WebhookRecipientHeader"
            },
            "description": "Zero or more configuration blocks (described below) to add custom webhook headers if desired.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Webhook Integration to create.\n"
          },
          "secret": {
            "type": "string",
            "description": "The secret to include when sending the notification to the webhook.\n",
            "secret": true
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FWebhookRecipientTemplate:WebhookRecipientTemplate"
            },
            "description": "Zero or more configuration blocks (described below) to customize the webhook payload if desired.\n"
          },
          "url": {
            "type": "string",
            "description": "The URL of the endpoint to send the notification to.\n"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FWebhookRecipientVariable:WebhookRecipientVariable"
            },
            "description": "Zero or more configuration blocks (described below) to define variables to be used in the webhook payload if desired.\n"
          }
        },
        "type": "object"
      }
    }
  },
  "functions": {
    "honeycombio:index/getAuthMetadata:getAuthMetadata": {
      "description": "## # Data Source: honeycombio.getAuthMetadata\n\nThe `honeycombio.getAuthMetadata` data source retreives information about the API key used to authenticate the provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst current = honeycombio.getAuthMetadata({});\nexport const teamName = current.then(current =\u003e current.team?.name);\nexport const environmentSlug = current.then(current =\u003e current.environment?.slug);\nexport const sloManagementAccess = current.then(current =\u003e current.apiKeyAccess?.slos);\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\ncurrent = honeycombio.get_auth_metadata()\npulumi.export(\"teamName\", current.team.name)\npulumi.export(\"environmentSlug\", current.environment.slug)\npulumi.export(\"sloManagementAccess\", current.api_key_access.slos)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Honeycombio.GetAuthMetadata.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"teamName\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.Team?.Name),\n        [\"environmentSlug\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.Environment?.Slug),\n        [\"sloManagementAccess\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.ApiKeyAccess?.Slos),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := honeycombio.GetAuthMetadata(ctx, \u0026honeycombio.GetAuthMetadataArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"teamName\", current.Team.Name)\n\t\tctx.Export(\"environmentSlug\", current.Environment.Slug)\n\t\tctx.Export(\"sloManagementAccess\", current.ApiKeyAccess.Slos)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetAuthMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = HoneycombioFunctions.getAuthMetadata();\n\n        ctx.export(\"teamName\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.team().name()));\n        ctx.export(\"environmentSlug\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.environment().slug()));\n        ctx.export(\"sloManagementAccess\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.apiKeyAccess().slos()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: honeycombio:getAuthMetadata\n      arguments: {}\noutputs:\n  teamName: ${current.team.name}\n  environmentSlug: ${current.environment.slug}\n  sloManagementAccess: ${current.apiKeyAccess.slos}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getAuthMetadata.\n",
        "properties": {
          "apiKeyAccess": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataApiKeyAccess:getAuthMetadataApiKeyAccess",
            "description": "The authorizations granted for the API key used to authenticate the provider.\nSee [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.\n"
          },
          "environment": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataEnvironment:getAuthMetadataEnvironment",
            "description": "Information about the Environment the API key is scoped to.\n"
          },
          "team": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataTeam:getAuthMetadataTeam",
            "description": "Information about the Team the API key is scoped to.\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getAuthMetadata.\n",
        "properties": {
          "apiKeyAccess": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataApiKeyAccess:getAuthMetadataApiKeyAccess",
            "description": "The authorizations granted for the API key used to authenticate the provider.\nSee [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.\n"
          },
          "environment": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataEnvironment:getAuthMetadataEnvironment",
            "description": "Information about the Environment the API key is scoped to.\n"
          },
          "id": {
            "description": "The provider-assigned unique ID for this managed resource.\n",
            "type": "string"
          },
          "team": {
            "$ref": "#/types/honeycombio:index%2FgetAuthMetadataTeam:getAuthMetadataTeam",
            "description": "Information about the Team the API key is scoped to.\n"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getColumn:getColumn": {
      "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst mycol = honeycombio.getColumn({\n    dataset: dataset,\n    name: \"mycol\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nmycol = honeycombio.get_column(dataset=dataset,\n    name=\"mycol\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var mycol = Honeycombio.GetColumn.Invoke(new()\n    {\n        Dataset = dataset,\n        Name = \"mycol\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.LookupColumn(ctx, \u0026honeycombio.LookupColumnArgs{\n\t\t\tDataset: dataset,\n\t\t\tName:    \"mycol\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var mycol = HoneycombioFunctions.getColumn(GetColumnArgs.builder()\n            .dataset(dataset)\n            .name(\"mycol\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  mycol:\n    fn::invoke:\n      function: honeycombio:getColumn\n      arguments:\n        dataset: ${dataset}\n        name: mycol\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getColumn.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this column is associated with\n"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the column\n"
          }
        },
        "type": "object",
        "required": [
          "dataset",
          "name"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getColumn.\n",
        "properties": {
          "createdAt": {
            "description": "the ISO8601 formatted time when the column was created\n",
            "type": "string"
          },
          "dataset": {
            "type": "string"
          },
          "description": {
            "description": "the description of the column\n",
            "type": "string"
          },
          "hidden": {
            "description": "whether or not the column is hidden from the query builder and results\n",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "lastWrittenAt": {
            "description": "the ISO8601 formatted time that the column last received data\n",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "description": "the type of the column (string, integer, float, or boolean)\n",
            "type": "string"
          },
          "updatedAt": {
            "description": "the  ISO8601 formatted time when the column's metadata (type, description, etc) was last changed\n",
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "dataset",
          "description",
          "hidden",
          "id",
          "lastWrittenAt",
          "name",
          "type",
          "updatedAt"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getColumns:getColumns": {
      "description": "## # Data Source: honeycombio.getColumns\n\nThe columns data source allows the columns of a dataset to be retrieved.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst all = honeycombio.getColumns({\n    dataset: dataset,\n});\nconst foo = honeycombio.getColumns({\n    dataset: dataset,\n    startsWith: \"foo_\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nall = honeycombio.get_columns(dataset=dataset)\nfoo = honeycombio.get_columns(dataset=dataset,\n    starts_with=\"foo_\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var all = Honeycombio.GetColumns.Invoke(new()\n    {\n        Dataset = dataset,\n    });\n\n    var foo = Honeycombio.GetColumns.Invoke(new()\n    {\n        Dataset = dataset,\n        StartsWith = \"foo_\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.GetColumns(ctx, \u0026honeycombio.GetColumnsArgs{\n\t\t\tDataset: dataset,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.GetColumns(ctx, \u0026honeycombio.GetColumnsArgs{\n\t\t\tDataset:    dataset,\n\t\t\tStartsWith: pulumi.StringRef(\"foo_\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetColumnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var all = HoneycombioFunctions.getColumns(GetColumnsArgs.builder()\n            .dataset(dataset)\n            .build());\n\n        final var foo = HoneycombioFunctions.getColumns(GetColumnsArgs.builder()\n            .dataset(dataset)\n            .startsWith(\"foo_\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getColumns\n      arguments:\n        dataset: ${dataset}\n  foo:\n    fn::invoke:\n      function: honeycombio:getColumns\n      arguments:\n        dataset: ${dataset}\n        startsWith: foo_\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getColumns.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset to retrieve the columns list from\n"
          },
          "id": {
            "type": "string"
          },
          "startsWith": {
            "type": "string",
            "description": "Only return columns starting with the given value.\n"
          }
        },
        "type": "object",
        "required": [
          "dataset"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getColumns.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "names": {
            "description": "a list of all the column names found in the dataset\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "required": [
          "dataset",
          "id",
          "names"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getDataset:getDataset": {
      "description": "## # Data Source: honeycombio.Dataset\n\nThe `honeycombio.Dataset` data source retrieves the details of a single Dataset.\nIf you want to retrieve multiple Datasets, use the `honeycombio.getDatasets` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst my-service = honeycombio.getDataset({\n    slug: \"my-service\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nmy_service = honeycombio.get_dataset(slug=\"my-service\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_service = Honeycombio.GetDataset.Invoke(new()\n    {\n        Slug = \"my-service\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.LookupDataset(ctx, \u0026honeycombio.LookupDatasetArgs{\n\t\t\tSlug: \"my-service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetDatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-service = HoneycombioFunctions.getDataset(GetDatasetArgs.builder()\n            .slug(\"my-service\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-service:\n    fn::invoke:\n      function: honeycombio:getDataset\n      arguments:\n        slug: my-service\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getDataset.\n",
        "properties": {
          "slug": {
            "type": "string",
            "description": "The Slug of the Dataset\n"
          }
        },
        "type": "object",
        "required": [
          "slug"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getDataset.\n",
        "properties": {
          "createdAt": {
            "description": "ISO8601-formatted time the dataset was created.\n",
            "type": "string"
          },
          "deleteProtected": {
            "description": "the current state of the Dataset's deletion protection status.\n",
            "type": "boolean"
          },
          "description": {
            "description": "the Dataset's description.\n",
            "type": "string"
          },
          "expandJsonDepth": {
            "description": "The Dataset's maximum unpacking depth of nested JSON fields.\n",
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "lastWrittenAt": {
            "description": "ISO8601-formatted time the dataset was last written to (received event data).\n",
            "type": "string"
          },
          "name": {
            "description": "the Dataset's name.\n",
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "deleteProtected",
          "description",
          "expandJsonDepth",
          "id",
          "lastWrittenAt",
          "name",
          "slug"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getDatasets:getDatasets": {
      "description": "## # Data Source: honeycombio.getDatasets\n\nThe Datasets data source retrieves the Environment's Datasets.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst all = honeycombio.getDatasets({});\nconst foo = honeycombio.getDatasets({\n    detailFilters: [{\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nall = honeycombio.get_datasets()\nfoo = honeycombio.get_datasets(detail_filters=[{\n    \"name\": \"name\",\n    \"value_regex\": \"foo_*\",\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycombio.GetDatasets.Invoke();\n\n    var foo = Honeycombio.GetDatasets.Invoke(new()\n    {\n        DetailFilters = new[]\n        {\n            new Honeycombio.Inputs.GetDatasetsDetailFilterInputArgs\n            {\n                Name = \"name\",\n                ValueRegex = \"foo_*\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.GetDatasets(ctx, \u0026honeycombio.GetDatasetsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.GetDatasets(ctx, \u0026honeycombio.GetDatasetsArgs{\n\t\t\tDetailFilters: []honeycombio.GetDatasetsDetailFilter{\n\t\t\t\t{\n\t\t\t\t\tName:       \"name\",\n\t\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetDatasetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombioFunctions.getDatasets();\n\n        final var foo = HoneycombioFunctions.getDatasets(GetDatasetsArgs.builder()\n            .detailFilters(GetDatasetsDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getDatasets\n      arguments: {}\n  foo:\n    fn::invoke:\n      function: honeycombio:getDatasets\n      arguments:\n        detailFilters:\n          - name: name\n            valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getDatasets.\n",
        "properties": {
          "detailFilters": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetDatasetsDetailFilter:getDatasetsDetailFilter"
            },
            "description": "a block to further filter results as described below. `name` must be set when providing a filter. Conflicts with `starts_with`.\n"
          },
          "startsWith": {
            "type": "string",
            "description": "Deprecated: use `detail_filter` instead. Only return datasets whose name starts with the given value.\n",
            "deprecationMessage": "Deprecated"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getDatasets.\n",
        "properties": {
          "detailFilters": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetDatasetsDetailFilter:getDatasetsDetailFilter"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "names": {
            "description": "a list of all the dataset names.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slugs": {
            "description": "a list of all the dataset slugs.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "deprecationMessage": "Deprecated",
            "type": "string"
          }
        },
        "required": [
          "id",
          "names",
          "slugs"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getDerivedColumn:getDerivedColumn": {
      "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst mydc = honeycombio.getDerivedColumn({\n    dataset: dataset,\n    alias: \"mydc\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nmydc = honeycombio.get_derived_column(dataset=dataset,\n    alias=\"mydc\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var mydc = Honeycombio.GetDerivedColumn.Invoke(new()\n    {\n        Dataset = dataset,\n        Alias = \"mydc\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.LookupDerivedColumn(ctx, \u0026honeycombio.LookupDerivedColumnArgs{\n\t\t\tDataset: dataset,\n\t\t\tAlias:   \"mydc\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetDerivedColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var mydc = HoneycombioFunctions.getDerivedColumn(GetDerivedColumnArgs.builder()\n            .dataset(dataset)\n            .alias(\"mydc\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  mydc:\n    fn::invoke:\n      function: honeycombio:getDerivedColumn\n      arguments:\n        dataset: ${dataset}\n        alias: mydc\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getDerivedColumn.\n",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The alias of the column\n"
          },
          "dataset": {
            "type": "string",
            "description": "The dataset this derived column is associated with. Use `__all__` for Environment-wide derived columns.\n"
          }
        },
        "type": "object",
        "required": [
          "alias",
          "dataset"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getDerivedColumn.\n",
        "properties": {
          "alias": {
            "type": "string"
          },
          "dataset": {
            "type": "string"
          },
          "description": {
            "description": "the description of the derived column\n",
            "type": "string"
          },
          "expression": {
            "description": "the expression of the derived column\n",
            "type": "string"
          },
          "id": {
            "description": "the ID of the derived column.\n",
            "type": "string"
          }
        },
        "required": [
          "alias",
          "dataset",
          "description",
          "expression",
          "id"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getDerivedColumns:getDerivedColumns": {
      "description": "## # Data Source: honeycombio.getDerivedColumns\n\nThe `honeycombio.getDerivedColumns` data source allows the derived columns of a dataset to be retrieved.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst all = honeycombio.getDerivedColumns({\n    dataset: dataset,\n});\nconst foo = honeycombio.getDerivedColumns({\n    dataset: dataset,\n    startsWith: \"foo_\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nall = honeycombio.get_derived_columns(dataset=dataset)\nfoo = honeycombio.get_derived_columns(dataset=dataset,\n    starts_with=\"foo_\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var all = Honeycombio.GetDerivedColumns.Invoke(new()\n    {\n        Dataset = dataset,\n    });\n\n    var foo = Honeycombio.GetDerivedColumns.Invoke(new()\n    {\n        Dataset = dataset,\n        StartsWith = \"foo_\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.GetDerivedColumns(ctx, \u0026honeycombio.GetDerivedColumnsArgs{\n\t\t\tDataset: dataset,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.GetDerivedColumns(ctx, \u0026honeycombio.GetDerivedColumnsArgs{\n\t\t\tDataset:    dataset,\n\t\t\tStartsWith: pulumi.StringRef(\"foo_\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetDerivedColumnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var all = HoneycombioFunctions.getDerivedColumns(GetDerivedColumnsArgs.builder()\n            .dataset(dataset)\n            .build());\n\n        final var foo = HoneycombioFunctions.getDerivedColumns(GetDerivedColumnsArgs.builder()\n            .dataset(dataset)\n            .startsWith(\"foo_\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getDerivedColumns\n      arguments:\n        dataset: ${dataset}\n  foo:\n    fn::invoke:\n      function: honeycombio:getDerivedColumns\n      arguments:\n        dataset: ${dataset}\n        startsWith: foo_\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getDerivedColumns.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset to retrieve the columns list from. Use `__all__` for Environment-wide derived columns.\n"
          },
          "startsWith": {
            "type": "string",
            "description": "Only return derived columns starting with the given value.\n"
          }
        },
        "type": "object",
        "required": [
          "dataset"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getDerivedColumns.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "names": {
            "description": "a list of all the derived column names found in the dataset\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "required": [
          "dataset",
          "id",
          "names"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getEnvironment:getEnvironment": {
      "description": "## # Data Source: honeycombio.Environment\n\nThe `honeycombio.Environment` data source retrieves the details of a single Environment.\nIf you want to retrieve multiple Environments, use the `honeycombio.getEnvironments` data source instead.\n\n\u003e This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst prod = honeycombio.getEnvironment({\n    id: \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nprod = honeycombio.get_environment(id=\"hcaen_01j1d7t02zf7wgw7q89z3t60vf\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = Honeycombio.GetEnvironment.Invoke(new()\n    {\n        Id = \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.LookupEnvironment(ctx, \u0026honeycombio.LookupEnvironmentArgs{\n\t\t\tId: \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var prod = HoneycombioFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .id(\"hcaen_01j1d7t02zf7wgw7q89z3t60vf\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  prod:\n    fn::invoke:\n      function: honeycombio:getEnvironment\n      arguments:\n        id: hcaen_01j1d7t02zf7wgw7q89z3t60vf\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getEnvironment.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Environment\n"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getEnvironment.\n",
        "properties": {
          "color": {
            "description": "the Environment's color.\n",
            "type": "string"
          },
          "deleteProtected": {
            "description": "the current state of the Environment's deletion protection status.\n",
            "type": "boolean"
          },
          "description": {
            "description": "the Environment's description.\n",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "the Environment's name.\n",
            "type": "string"
          },
          "slug": {
            "description": "the Environment's slug.\n",
            "type": "string"
          }
        },
        "required": [
          "color",
          "deleteProtected",
          "description",
          "id",
          "name",
          "slug"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getEnvironments:getEnvironments": {
      "description": "## # Data Source: honeycombio.getEnvironments\n\nThe Environments data source retrieves the Team's environments.\n\n\u003e This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst all = honeycombio.getEnvironments({});\nconst foo = honeycombio.getEnvironments({\n    detailFilters: [{\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nall = honeycombio.get_environments()\nfoo = honeycombio.get_environments(detail_filters=[{\n    \"name\": \"name\",\n    \"value_regex\": \"foo_*\",\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycombio.GetEnvironments.Invoke();\n\n    var foo = Honeycombio.GetEnvironments.Invoke(new()\n    {\n        DetailFilters = new[]\n        {\n            new Honeycombio.Inputs.GetEnvironmentsDetailFilterInputArgs\n            {\n                Name = \"name\",\n                ValueRegex = \"foo_*\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.GetEnvironments(ctx, \u0026honeycombio.GetEnvironmentsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.GetEnvironments(ctx, \u0026honeycombio.GetEnvironmentsArgs{\n\t\t\tDetailFilters: []honeycombio.GetEnvironmentsDetailFilter{\n\t\t\t\t{\n\t\t\t\t\tName:       \"name\",\n\t\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetEnvironmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombioFunctions.getEnvironments();\n\n        final var foo = HoneycombioFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .detailFilters(GetEnvironmentsDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getEnvironments\n      arguments: {}\n  foo:\n    fn::invoke:\n      function: honeycombio:getEnvironments\n      arguments:\n        detailFilters:\n          - name: name\n            valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getEnvironments.\n",
        "properties": {
          "detailFilters": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetEnvironmentsDetailFilter:getEnvironmentsDetailFilter"
            },
            "description": "a block to further filter results as described below. `name` must be set when providing a filter.\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getEnvironments.\n",
        "properties": {
          "detailFilters": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetEnvironmentsDetailFilter:getEnvironmentsDetailFilter"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "ids": {
            "description": "a list of all the Environment IDs found in the Team.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "ids"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getQueryResult:getQueryResult": {
      "inputs": {
        "description": "A collection of arguments for invoking getQueryResult.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this query is associated with. Use `__all__` for Environment-wide queries.\n"
          },
          "id": {
            "type": "string"
          },
          "queryJson": {
            "type": "string",
            "description": "A JSON object describing the query according to the Query Specification. While the JSON can be constructed manually, it is easiest to use the honeycombio.getQuerySpecification data source.\n"
          }
        },
        "type": "object",
        "required": [
          "dataset",
          "queryJson"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getQueryResult.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "graphImageUrl": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "queryId": {
            "description": "The ID of the Query created and executed to obtain the result.\n",
            "type": "string"
          },
          "queryJson": {
            "type": "string"
          },
          "queryUrl": {
            "description": "The permalink to the executed query's results.\n",
            "type": "string"
          },
          "results": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "dataset",
          "graphImageUrl",
          "id",
          "queryId",
          "queryJson",
          "queryUrl",
          "results"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getQuerySpecification:getQuerySpecification": {
      "description": "## # Data Source: honeycombio.getQuerySpecification\n\nGenerates a [Query Specification](https://docs.honeycomb.io/api/query-specification/) in JSON format for use with resources that expect a JSON-formatted Query Specification like `honeycombio.Query`.\n\nUsing this data source to generate query specifications is optional.\nIt is also valid to use literal JSON strings in your configuration or to use the file interpolation function to read a raw JSON query specification from a file.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst example = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [\n        {\n            column: \"trace.parent_id\",\n            op: \"does-not-exist\",\n        },\n        {\n            column: \"app.tenant\",\n            op: \"=\",\n            value: \"ThatSpecialTenant\",\n        },\n    ],\n    filterCombination: \"AND\",\n    breakdowns: [\"app.tenant\"],\n    timeRange: 28800,\n});\nexport const jsonQuery = example.then(example =\u003e example.json);\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nexample = honeycombio.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[\n        {\n            \"column\": \"trace.parent_id\",\n            \"op\": \"does-not-exist\",\n        },\n        {\n            \"column\": \"app.tenant\",\n            \"op\": \"=\",\n            \"value\": \"ThatSpecialTenant\",\n        },\n    ],\n    filter_combination=\"AND\",\n    breakdowns=[\"app.tenant\"],\n    time_range=28800)\npulumi.export(\"jsonQuery\", example.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n            new Honeycombio.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"app.tenant\",\n                Op = \"=\",\n                Value = \"ThatSpecialTenant\",\n            },\n        },\n        FilterCombination = \"AND\",\n        Breakdowns = new[]\n        {\n            \"app.tenant\",\n        },\n        TimeRange = 28800,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"jsonQuery\"] = example.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycombio.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tColumn: \"app.tenant\",\n\t\t\t\t\tOp:     \"=\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"ThatSpecialTenant\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterCombination: pulumi.StringRef(\"AND\"),\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.tenant\",\n\t\t\t},\n\t\t\tTimeRange: pulumi.Float64Ref(28800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"jsonQuery\", example.Json)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(            \n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"trace.parent_id\")\n                    .op(\"does-not-exist\")\n                    .build(),\n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"app.tenant\")\n                    .op(\"=\")\n                    .value(\"ThatSpecialTenant\")\n                    .build())\n            .filterCombination(\"AND\")\n            .breakdowns(\"app.tenant\")\n            .timeRange(28800)\n            .build());\n\n        ctx.export(\"jsonQuery\", example.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n          - column: app.tenant\n            op: =\n            value: ThatSpecialTenant\n        filterCombination: AND\n        breakdowns:\n          - app.tenant\n        timeRange: 28800\noutputs:\n  jsonQuery: ${example.json}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getQuerySpecification.\n",
        "properties": {
          "breakdowns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of fields to group by.\n"
          },
          "calculations": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationCalculation:getQuerySpecificationCalculation"
            },
            "description": "Zero or more configuration blocks (described below) with the calculations that should be displayed. If no calculations are specified, `COUNT` will be used.\n"
          },
          "endTime": {
            "type": "number",
            "description": "The absolute end time of the query in Unix Time (= seconds since epoch).\n"
          },
          "filterCombination": {
            "type": "string",
            "description": "How to combine multiple filters, either `AND` (default) or `OR`.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationFilter:getQuerySpecificationFilter"
            },
            "description": "Zero or more configuration blocks (described below) with the filters that should be applied.\n"
          },
          "granularity": {
            "type": "number",
            "description": "The time resolution of the query’s graph, in seconds. Valid values must be in between the query’s time range /10 at maximum, and /1000 at minimum.\n\n\u003e **NOTE** It is not allowed to specify all three of `time_range`, `start_time` and `end_time`. For more details about specifying time windows, check [Query specification: A caveat on time](https://docs.honeycomb.io/api/query-specification/#a-caveat-on-time).\n"
          },
          "havings": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationHaving:getQuerySpecificationHaving"
            },
            "description": "Zero or more filters used to restrict returned groups in the query result.\n"
          },
          "limit": {
            "type": "number",
            "description": "The maximum number of query results, must be between 1 and 1000.\n"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationOrder:getQuerySpecificationOrder"
            },
            "description": "Zero or more configuration blocks (described below) describing how to order the query results. Each term must appear in either `calculation` or `breakdowns`.\n"
          },
          "startTime": {
            "type": "number",
            "description": "The absolute start time of the query in Unix Time (= seconds since epoch).\n"
          },
          "timeRange": {
            "type": "number",
            "description": "The time range of the query in seconds, defaults to `7200` (two hours).\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getQuerySpecification.\n",
        "properties": {
          "breakdowns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "calculations": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationCalculation:getQuerySpecificationCalculation"
            },
            "type": "array"
          },
          "endTime": {
            "type": "number"
          },
          "filterCombination": {
            "type": "string"
          },
          "filters": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationFilter:getQuerySpecificationFilter"
            },
            "type": "array"
          },
          "granularity": {
            "type": "number"
          },
          "havings": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationHaving:getQuerySpecificationHaving"
            },
            "type": "array"
          },
          "id": {
            "deprecationMessage": "Deprecated",
            "description": "ID of the query specification.\n",
            "type": "string"
          },
          "json": {
            "description": "JSON representation of the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification), can be used as input for other resources.\n",
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "orders": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetQuerySpecificationOrder:getQuerySpecificationOrder"
            },
            "type": "array"
          },
          "startTime": {
            "type": "number"
          },
          "timeRange": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "json"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getRecipient:getRecipient": {
      "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst slack = honeycombio.getRecipient({\n    type: \"slack\",\n    detailFilter: {\n        name: \"channel\",\n        value: \"#honeycomb-triggers\",\n    },\n});\nconst exampleQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n});\nconst exampleTrigger = new honeycombio.Trigger(\"exampleTrigger\", {\n    queryJson: exampleQuerySpecification.then(exampleQuerySpecification =\u003e exampleQuerySpecification.json),\n    dataset: _var.dataset,\n    thresholds: [{\n        op: \"\u003e\",\n        value: 1000,\n    }],\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            id: slack.then(slack =\u003e slack.id),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nslack = honeycombio.get_recipient(type=\"slack\",\n    detail_filter={\n        \"name\": \"channel\",\n        \"value\": \"#honeycomb-triggers\",\n    })\nexample_query_specification = honeycombio.get_query_specification(calculations=[{\n    \"op\": \"AVG\",\n    \"column\": \"duration_ms\",\n}])\nexample_trigger = honeycombio.Trigger(\"exampleTrigger\",\n    query_json=example_query_specification.json,\n    dataset=var[\"dataset\"],\n    thresholds=[{\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    }],\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"id\": slack.id,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slack = Honeycombio.GetRecipient.Invoke(new()\n    {\n        Type = \"slack\",\n        DetailFilter = new Honeycombio.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"channel\",\n            Value = \"#honeycomb-triggers\",\n        },\n    });\n\n    var exampleQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n    });\n\n    var exampleTrigger = new Honeycombio.Trigger(\"exampleTrigger\", new()\n    {\n        QueryJson = exampleQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = @var.Dataset,\n        Thresholds = new[]\n        {\n            new Honeycombio.Inputs.TriggerThresholdArgs\n            {\n                Op = \"\u003e\",\n                Value = 1000,\n            },\n        },\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Id = slack.Apply(getRecipientResult =\u003e getRecipientResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tslack, err := honeycombio.GetRecipient(ctx, \u0026honeycombio.GetRecipientArgs{\n\t\t\tType: \"slack\",\n\t\t\tDetailFilter: honeycombio.GetRecipientDetailFilter{\n\t\t\t\tName:  \"channel\",\n\t\t\t\tValue: pulumi.StringRef(\"#honeycomb-triggers\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycombio.TriggerArgs{\n\t\t\tQueryJson: pulumi.String(exampleQuerySpecification.Json),\n\t\t\tDataset:   pulumi.Any(_var.Dataset),\n\t\t\tThresholds: honeycombio.TriggerThresholdArray{\n\t\t\t\t\u0026honeycombio.TriggerThresholdArgs{\n\t\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecipients: honeycombio.TriggerRecipientArray{\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tId: pulumi.String(slack.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientArgs;\nimport com.pulumi.honeycombio.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Trigger;\nimport com.pulumi.honeycombio.TriggerArgs;\nimport com.pulumi.honeycombio.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycombio.inputs.TriggerRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var slack = HoneycombioFunctions.getRecipient(GetRecipientArgs.builder()\n            .type(\"slack\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"channel\")\n                .value(\"#honeycomb-triggers\")\n                .build())\n            .build());\n\n        final var exampleQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .queryJson(exampleQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(var_.dataset())\n            .thresholds(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(            \n                TriggerRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                TriggerRecipientArgs.builder()\n                    .id(slack.applyValue(getRecipientResult -\u003e getRecipientResult.id()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTrigger:\n    type: honeycombio:Trigger\n    properties:\n      queryJson: ${exampleQuerySpecification.json}\n      dataset: ${var.dataset}\n      thresholds:\n        - op: '\u003e'\n          value: 1000\n      recipients:\n        - type: email\n          target: hello@example.com\n        - id: ${slack.id}\nvariables:\n  slack:\n    fn::invoke:\n      function: honeycombio:getRecipient\n      arguments:\n        type: slack\n        detailFilter:\n          name: channel\n          value: '#honeycomb-triggers'\n  exampleQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getRecipient.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "Deprecated: recipients are now a Team-level construct. Any provided value will be ignored.\n",
            "deprecationMessage": "Deprecated"
          },
          "detailFilter": {
            "$ref": "#/types/honeycombio:index%2FgetRecipientDetailFilter:getRecipientDetailFilter",
            "description": "a block to further filter recipients as described below.\n"
          },
          "id": {
            "type": "string",
            "description": "ID of the recipient.\n"
          },
          "target": {
            "type": "string",
            "description": "Deprecated: use `detail_filter` instead. The target of the recipient, this has another meaning depending on the type of recipient (see the table below).\n\nType             | Target\n-----------------|-------------------------\nemail            | an email address\nmarker           | name of the marker\nmsteams          | name of the integration\nmsteams_workflow | name of the integration\npagerduty        | _N/A_\nslack            | name of the channel\nwebhook          | name of the webhook\n",
            "deprecationMessage": "Deprecated"
          },
          "type": {
            "type": "string",
            "description": "The type of recipient, allowed types are `email`, `pagerduty`, `msteams`, `msteams_workflow`, `slack` and `webhook`.\n"
          }
        },
        "type": "object",
        "required": [
          "type"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getRecipient.\n",
        "properties": {
          "address": {
            "description": "The email recipient's address -- if of type `email`.\n",
            "type": "string"
          },
          "channel": {
            "description": "The Slack recipient's channel -- if of type `slack`.\n",
            "type": "string"
          },
          "dataset": {
            "deprecationMessage": "Deprecated",
            "type": "string"
          },
          "detailFilter": {
            "$ref": "#/types/honeycombio:index%2FgetRecipientDetailFilter:getRecipientDetailFilter"
          },
          "id": {
            "description": "ID of the recipient.\n",
            "type": "string"
          },
          "integrationKey": {
            "description": "(Sensitive) The PagerDuty recipient's integration key -- if of type `pagerduty`.\n",
            "secret": true,
            "type": "string"
          },
          "integrationName": {
            "description": "The PagerDuty recipient's integration name -- if of type `pagerduty`.\n",
            "type": "string"
          },
          "name": {
            "description": "The webhook recipient's name -- if of type `webhook` or `msteams`.\n",
            "type": "string"
          },
          "secret": {
            "description": "(Sensitive) The webhook recipient's secret -- if of type `webhook`.\n",
            "secret": true,
            "type": "string"
          },
          "target": {
            "deprecationMessage": "Deprecated",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "description": "The webhook recipient's URL - if of type `webhook`, `msteams` or `msteams_workflow`.\n",
            "type": "string"
          }
        },
        "required": [
          "address",
          "channel",
          "id",
          "integrationKey",
          "integrationName",
          "name",
          "secret",
          "type",
          "url"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getRecipients:getRecipients": {
      "description": "## # Data Source: honeycombio.getRecipients\n\n`honeycombio.getRecipients` data source provides recipient IDs of recipients matching a set of criteria.\n\n## Example Usage\n\n### Get all recipients\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst all = honeycombio.getRecipients({});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nall = honeycombio.get_recipients()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycombio.GetRecipients.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.GetRecipients(ctx, \u0026honeycombio.GetRecipientsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombioFunctions.getRecipients();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getRecipients\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Get all email recipients matching a specific domain\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst example-dot-com = honeycombio.getRecipients({\n    detailFilter: {\n        name: \"address\",\n        valueRegex: \".*@example.com\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nexample_dot_com = honeycombio.get_recipients(detail_filter={\n        \"name\": \"address\",\n        \"value_regex\": \".*@example.com\",\n    },\n    type=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example_dot_com = Honeycombio.GetRecipients.Invoke(new()\n    {\n        DetailFilter = new Honeycombio.Inputs.GetRecipientsDetailFilterInputArgs\n        {\n            Name = \"address\",\n            ValueRegex = \".*@example.com\",\n        },\n        Type = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycombio.GetRecipients(ctx, \u0026honeycombio.GetRecipientsArgs{\n\t\t\tDetailFilter: honeycombio.GetRecipientsDetailFilter{\n\t\t\t\tName:       \"address\",\n\t\t\t\tValueRegex: pulumi.StringRef(\".*@example.com\"),\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"email\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetRecipientsArgs;\nimport com.pulumi.honeycombio.inputs.GetRecipientsDetailFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example-dot-com = HoneycombioFunctions.getRecipients(GetRecipientsArgs.builder()\n            .detailFilter(GetRecipientsDetailFilterArgs.builder()\n                .name(\"address\")\n                .valueRegex(\".*@example.com\")\n                .build())\n            .type(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example-dot-com:\n    fn::invoke:\n      function: honeycombio:getRecipients\n      arguments:\n        detailFilter:\n          name: address\n          valueRegex: .*@example.com\n        type: email\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getRecipients.\n",
        "properties": {
          "detailFilter": {
            "$ref": "#/types/honeycombio:index%2FgetRecipientsDetailFilter:getRecipientsDetailFilter",
            "description": "a block to further filter recipients as described below. `name` must be set when providing a filter.\n"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The type of recipient, allowed types are `email`, `pagerduty`, `msteams`, `msteams_workflow`, `slack` and `webhook`.\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getRecipients.\n",
        "properties": {
          "detailFilter": {
            "$ref": "#/types/honeycombio:index%2FgetRecipientsDetailFilter:getRecipientsDetailFilter"
          },
          "id": {
            "type": "string"
          },
          "ids": {
            "description": "A list of all the recipient IDs found.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "ids"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getSlo:getSlo": {
      "description": "## # Data Source: honeycombio.Slo\n\nThe `honeycombio.Slo` data source retrieves the details of a single SLO for a dataset.\nIf you want to retreive multiple SLOs, use the `honeycombio.getSlos` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst myslo = honeycombio.getSlo({\n    dataset: dataset,\n    id: \"fS4WfA82ACt\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nmyslo = honeycombio.get_slo(dataset=dataset,\n    id=\"fS4WfA82ACt\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var myslo = Honeycombio.GetSlo.Invoke(new()\n    {\n        Dataset = dataset,\n        Id = \"fS4WfA82ACt\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.LookupSlo(ctx, \u0026honeycombio.LookupSloArgs{\n\t\t\tDataset: dataset,\n\t\t\tId:      \"fS4WfA82ACt\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetSloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var myslo = HoneycombioFunctions.getSlo(GetSloArgs.builder()\n            .dataset(dataset)\n            .id(\"fS4WfA82ACt\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  myslo:\n    fn::invoke:\n      function: honeycombio:getSlo\n      arguments:\n        dataset: ${dataset}\n        id: fS4WfA82ACt\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getSlo.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset this SLO is associated with\n"
          },
          "id": {
            "type": "string",
            "description": "The ID of the SLO\n"
          }
        },
        "type": "object",
        "required": [
          "dataset",
          "id"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getSlo.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "description": {
            "description": "the SLO's description.\n",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "the name of the SLO.\n",
            "type": "string"
          },
          "sli": {
            "description": "the alias of the Derived Column used as the SLO's SLI.\n",
            "type": "string"
          },
          "targetPercentage": {
            "description": "the percentage of qualified events expected to succeed during the `time_period`.\n",
            "type": "number"
          },
          "timePeriod": {
            "description": "The time period, in days, over which the SLO is evaluated.\n",
            "type": "number"
          }
        },
        "required": [
          "dataset",
          "description",
          "id",
          "name",
          "sli",
          "targetPercentage",
          "timePeriod"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getSlos:getSlos": {
      "description": "## # Data Source: honeycombio.getSlos\n\nThe SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detail_filter`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst all = honeycombio.getSlos({\n    dataset: dataset,\n});\nconst foo = honeycombio.getSlos({\n    dataset: dataset,\n    detailFilters: [{\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nall = honeycombio.get_slos(dataset=dataset)\nfoo = honeycombio.get_slos(dataset=dataset,\n    detail_filters=[{\n        \"name\": \"name\",\n        \"value_regex\": \"foo_*\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var all = Honeycombio.GetSlos.Invoke(new()\n    {\n        Dataset = dataset,\n    });\n\n    var foo = Honeycombio.GetSlos.Invoke(new()\n    {\n        Dataset = dataset,\n        DetailFilters = new[]\n        {\n            new Honeycombio.Inputs.GetSlosDetailFilterInputArgs\n            {\n                Name = \"name\",\n                ValueRegex = \"foo_*\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycombio.GetSlos(ctx, \u0026honeycombio.GetSlosArgs{\n\t\t\tDataset: dataset,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.GetSlos(ctx, \u0026honeycombio.GetSlosArgs{\n\t\t\tDataset: dataset,\n\t\t\tDetailFilters: []honeycombio.GetSlosDetailFilter{\n\t\t\t\t{\n\t\t\t\t\tName:       \"name\",\n\t\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetSlosArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var all = HoneycombioFunctions.getSlos(GetSlosArgs.builder()\n            .dataset(dataset)\n            .build());\n\n        final var foo = HoneycombioFunctions.getSlos(GetSlosArgs.builder()\n            .dataset(dataset)\n            .detailFilters(GetSlosDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  all:\n    fn::invoke:\n      function: honeycombio:getSlos\n      arguments:\n        dataset: ${dataset}\n  foo:\n    fn::invoke:\n      function: honeycombio:getSlos\n      arguments:\n        dataset: ${dataset}\n        detailFilters:\n          - name: name\n            valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getSlos.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "The dataset to retrieve the SLOs list from\n"
          },
          "detailFilters": {
            "type": "array",
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetSlosDetailFilter:getSlosDetailFilter"
            },
            "description": "a block to further filter results as described below. `name` must be set when providing a filter.\n"
          }
        },
        "type": "object",
        "required": [
          "dataset"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getSlos.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "detailFilters": {
            "items": {
              "$ref": "#/types/honeycombio:index%2FgetSlosDetailFilter:getSlosDetailFilter"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "ids": {
            "description": "a list of all the SLO IDs found in the dataset\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "dataset",
          "id",
          "ids"
        ],
        "type": "object"
      }
    },
    "honeycombio:index/getTriggerRecipient:getTriggerRecipient": {
      "description": "## # Data Source: honeycombio.getTriggerRecipient\n\nSearch the triggers of a dataset for a trigger recipient. The ID of the existing trigger recipient can be used when adding trigger recipients to new triggers.\n\n!\u003e **Deprecated** Use the `honeycombio.getRecipient` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycombio from \"@pulumi/honeycombio\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst slack = honeycombio.getTriggerRecipient({\n    dataset: dataset,\n    type: \"slack\",\n    target: \"honeycomb-triggers\",\n});\nconst exampleQuerySpecification = honeycombio.getQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n});\nconst exampleTrigger = new honeycombio.Trigger(\"exampleTrigger\", {\n    queryJson: exampleQuerySpecification.then(exampleQuerySpecification =\u003e exampleQuerySpecification.json),\n    dataset: dataset,\n    thresholds: [{\n        op: \"\u003e\",\n        value: 1000,\n    }],\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            id: slack.then(slack =\u003e slack.id),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycombio as honeycombio\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslack = honeycombio.get_trigger_recipient(dataset=dataset,\n    type=\"slack\",\n    target=\"honeycomb-triggers\")\nexample_query_specification = honeycombio.get_query_specification(calculations=[{\n    \"op\": \"AVG\",\n    \"column\": \"duration_ms\",\n}])\nexample_trigger = honeycombio.Trigger(\"exampleTrigger\",\n    query_json=example_query_specification.json,\n    dataset=dataset,\n    thresholds=[{\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    }],\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"id\": slack.id,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycombio = Pulumi.Honeycombio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var slack = Honeycombio.GetTriggerRecipient.Invoke(new()\n    {\n        Dataset = dataset,\n        Type = \"slack\",\n        Target = \"honeycomb-triggers\",\n    });\n\n    var exampleQuerySpecification = Honeycombio.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycombio.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n    });\n\n    var exampleTrigger = new Honeycombio.Trigger(\"exampleTrigger\", new()\n    {\n        QueryJson = exampleQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = dataset,\n        Thresholds = new[]\n        {\n            new Honeycombio.Inputs.TriggerThresholdArgs\n            {\n                Op = \"\u003e\",\n                Value = 1000,\n            },\n        },\n        Recipients = new[]\n        {\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycombio.Inputs.TriggerRecipientArgs\n            {\n                Id = slack.Apply(getTriggerRecipientResult =\u003e getTriggerRecipientResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/honeycombio/honeycombio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tslack, err := honeycombio.GetTriggerRecipient(ctx, \u0026honeycombio.GetTriggerRecipientArgs{\n\t\t\tDataset: dataset,\n\t\t\tType:    \"slack\",\n\t\t\tTarget:  pulumi.StringRef(\"honeycomb-triggers\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuerySpecification, err := honeycombio.GetQuerySpecification(ctx, \u0026honeycombio.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycombio.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycombio.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycombio.TriggerArgs{\n\t\t\tQueryJson: pulumi.String(exampleQuerySpecification.Json),\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tThresholds: honeycombio.TriggerThresholdArray{\n\t\t\t\t\u0026honeycombio.TriggerThresholdArgs{\n\t\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRecipients: honeycombio.TriggerRecipientArray{\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycombio.TriggerRecipientArgs{\n\t\t\t\t\tId: pulumi.String(slack.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycombio.HoneycombioFunctions;\nimport com.pulumi.honeycombio.inputs.GetTriggerRecipientArgs;\nimport com.pulumi.honeycombio.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycombio.Trigger;\nimport com.pulumi.honeycombio.TriggerArgs;\nimport com.pulumi.honeycombio.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycombio.inputs.TriggerRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var slack = HoneycombioFunctions.getTriggerRecipient(GetTriggerRecipientArgs.builder()\n            .dataset(dataset)\n            .type(\"slack\")\n            .target(\"honeycomb-triggers\")\n            .build());\n\n        final var exampleQuerySpecification = HoneycombioFunctions.getQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .queryJson(exampleQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(dataset)\n            .thresholds(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(            \n                TriggerRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                TriggerRecipientArgs.builder()\n                    .id(slack.applyValue(getTriggerRecipientResult -\u003e getTriggerRecipientResult.id()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycombio:Trigger\n    properties:\n      queryJson: ${exampleQuerySpecification.json}\n      dataset: ${dataset}\n      thresholds:\n        - op: '\u003e'\n          value: 1000\n      recipients:\n        - type: email\n          target: hello@example.com\n        - id: ${slack.id}\nvariables:\n  slack:\n    fn::invoke:\n      function: honeycombio:getTriggerRecipient\n      arguments:\n        dataset: ${dataset}\n        type: slack\n        target: honeycomb-triggers\n  exampleQuerySpecification:\n    fn::invoke:\n      function: honeycombio:getQuerySpecification\n      arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
      "inputs": {
        "description": "A collection of arguments for invoking getTriggerRecipient.\n",
        "properties": {
          "dataset": {
            "type": "string",
            "description": "Search through all triggers linked to this dataset.\n"
          },
          "id": {
            "type": "string",
            "description": "ID of the trigger recipient.\n"
          },
          "target": {
            "type": "string",
            "description": "Target of the trigger, this has another meaning depending on the type of recipient (see the table below).\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
          },
          "type": {
            "type": "string",
            "description": "The type of recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`.\n"
          }
        },
        "type": "object",
        "required": [
          "dataset",
          "type"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getTriggerRecipient.\n",
        "properties": {
          "dataset": {
            "type": "string"
          },
          "id": {
            "description": "ID of the trigger recipient.\n",
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "dataset",
          "id",
          "type"
        ],
        "type": "object"
      }
    }
  },
  "parameterization": {
    "baseProvider": {
      "name": "terraform-provider",
      "version": "0.8.1"
    },
    "parameter": "eyJyZW1vdGUiOnsidXJsIjoicmVnaXN0cnkub3BlbnRvZnUub3JnL2hvbmV5Y29tYmlvL2hvbmV5Y29tYmlvIiwidmVyc2lvbiI6IjAuMzAuMCJ9fQ=="
  }
}
